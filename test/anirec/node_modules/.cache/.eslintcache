[{"/home/jason/AniRec/test/anirec/src/index.js":"1","/home/jason/AniRec/test/anirec/src/App.js":"2","/home/jason/AniRec/test/anirec/src/components/global_elements/TopSpacer.js":"3","/home/jason/AniRec/test/anirec/src/components/global_elements/Header.js":"4","/home/jason/AniRec/test/anirec/src/GraphQL/Queries.js":"5","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyType.js":"6","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/questions.js":"7","/home/jason/AniRec/test/anirec/src/pages/home_page/Homepage.js":"8","/home/jason/AniRec/test/anirec/src/pages/landing_page/LandingPage.js":"9","/home/jason/AniRec/test/anirec/src/pages/landing_page/login_register_tabs.component.js":"10","/home/jason/AniRec/test/anirec/src/components/HomePageShowCard.js":"11","/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js":"12","/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js":"13","/home/jason/AniRec/test/anirec/src/components/ListingPageShowCard.js":"14","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js":"15","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GeneralShowMore.js":"16","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js":"17","/home/jason/AniRec/test/anirec/src/pages/landing_page/Wallpaper.js":"18","/home/jason/AniRec/test/anirec/src/pages/content_pages/show_page.js":"19","/home/jason/AniRec/test/anirec/src/components/animepages.component.js":"20","/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js":"21","/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js":"22","/home/jason/AniRec/test/anirec/src/pages/listing_pages/UserSpecificShowMore.js":"23"},{"size":268,"mtime":1618536412804,"results":"24","hashOfConfig":"25"},{"size":2216,"mtime":1621142890760,"results":"26","hashOfConfig":"25"},{"size":195,"mtime":1618536412784,"results":"27","hashOfConfig":"25"},{"size":1482,"mtime":1619648162399,"results":"28","hashOfConfig":"25"},{"size":3528,"mtime":1621136836131,"results":"29","hashOfConfig":"25"},{"size":677,"mtime":1620795711051,"results":"30","hashOfConfig":"25"},{"size":43724,"mtime":1620939403679,"results":"31","hashOfConfig":"25"},{"size":9149,"mtime":1621143074870,"results":"32","hashOfConfig":"25"},{"size":773,"mtime":1621137096241,"results":"33","hashOfConfig":"25"},{"size":2149,"mtime":1621137602473,"results":"34","hashOfConfig":"25"},{"size":4090,"mtime":1621108596535,"results":"35","hashOfConfig":"25"},{"size":3552,"mtime":1621137539180,"results":"36","hashOfConfig":"25"},{"size":2071,"mtime":1621137513778,"results":"37","hashOfConfig":"25"},{"size":3447,"mtime":1621138215840,"results":"38","hashOfConfig":"25"},{"size":5003,"mtime":1621139015253,"results":"39","hashOfConfig":"25"},{"size":5702,"mtime":1621137351791,"results":"40","hashOfConfig":"25"},{"size":5964,"mtime":1621134423907,"results":"41","hashOfConfig":"25"},{"size":1085,"mtime":1621137450461,"results":"42","hashOfConfig":"25"},{"size":6927,"mtime":1621138861020,"results":"43","hashOfConfig":"25"},{"size":1578,"mtime":1621138954993,"results":"44","hashOfConfig":"25"},{"size":1788,"mtime":1621051043652,"results":"45","hashOfConfig":"25"},{"size":990,"mtime":1621136339221,"results":"46","hashOfConfig":"25"},{"size":2599,"mtime":1621142984201,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"dui8tn",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/jason/AniRec/test/anirec/src/index.js",[],["101","102"],"/home/jason/AniRec/test/anirec/src/App.js",["103","104"],"/home/jason/AniRec/test/anirec/src/components/global_elements/TopSpacer.js",[],"/home/jason/AniRec/test/anirec/src/components/global_elements/Header.js",[],"/home/jason/AniRec/test/anirec/src/GraphQL/Queries.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyType.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/questions.js",[],"/home/jason/AniRec/test/anirec/src/pages/home_page/Homepage.js",["105"],"/home/jason/AniRec/test/anirec/src/pages/landing_page/LandingPage.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/login_register_tabs.component.js",[],"/home/jason/AniRec/test/anirec/src/components/HomePageShowCard.js",["106","107"],"import React, { Fragment } from \"react\";\r\nimport \"./HomePageShowCard.css\";\r\n//frame for the anime to show\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n//import GenreQuery from \"./dynamic_genre_query\";\r\n\r\nfunction HomePageShowCard(props){\r\n    let genreCount = props.genre.length\r\n\r\n    return(\r\n        <Fragment>\r\n            {/* Start of HomePageCard*/}\r\n                <Container className=\"homepage-card-outer\">\r\n                    <Row id=\"homepage-card-inner\">\r\n\r\n                        {/* Start of Show Image on Left-Side*/}\r\n                        <Col className=\"homepage-card-img\">\r\n                            <Link to={{\r\n                                        pathname:`/AnimePage/${props.id}`\r\n                                    }}>\r\n                                <img src={props.image}/>\r\n                                <div className=\"homepage-card-hover-info\">\r\n                                    <p>{props.description}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </Col>\r\n                        {/* End of Show Image on Left-Side*/}\r\n\r\n                        {/* Start of Show Description on Right-Side*/}\r\n                        <Col id=\"homepage-card-description\">\r\n\r\n                            {/* Start of Show Title*/}\r\n                            <Row id=\"homepage-card-title\">\r\n                                <Link id=\"homepage-card-title-text\"to={{\r\n                                        pathname:`/AnimePage/${props.id}`,\r\n                                    }}>\r\n                                <p id=\"homepage-card-text\">{props.name}</p>\r\n                                </Link>\r\n                            </Row>\r\n                            {/* End of Show Title*/}\r\n                            \r\n                            {/* Start of Show's Genres*/}\r\n                            <Row id=\"homepage-card-genres\">\r\n                                <p id=\"homepage-card-text\">\r\n                                    {/* Mapping each one to a Link to GenreShowMore*/}\r\n                                    {props.genre.map((genres) =>\r\n                                        {\r\n                                            if (genreCount < 2)\r\n                                                return <Link key={genres} className=\"homepage-card-tag-links\" to={{\r\n                                                            pathname:`/GenresShowMore/${genres}/1`\r\n                                                        }}>{genres}</Link>\r\n                                            else \r\n                                                genreCount--;\r\n                                                return  <Fragment>\r\n                                                            <Link key={genres} className=\"homepage-card-tag-links\" to={{\r\n                                                                pathname:`/GenresShowMore/${genres}/1`\r\n                                                                }}>{genres}\r\n                                                            </Link>\r\n                                                            <a>, </a>\r\n                                                        </Fragment>\r\n                                        }\r\n                                    )}\r\n                                </p>\r\n                            </Row>\r\n                            {/* End of Show's Genres*/}\r\n\r\n                            {/* Start of Show's Studio*/}\r\n                            <Row id=\"homepage-card-studio\">\r\n                                <p id=\"homepage-card-text\">{props.studio}</p>\r\n                            </Row>\r\n                            {/* End of Show's Studio*/}\r\n\r\n                        </Col>\r\n                        {/* End of Show Description on Right-Side*/}\r\n\r\n                    </Row>\r\n                </Container>\r\n                {/* End of HomePageCard*/}                \r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default HomePageShowCard;","/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js",[],"/home/jason/AniRec/test/anirec/src/components/ListingPageShowCard.js",["108","109"],"/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js",["110","111","112"],"/home/jason/AniRec/test/anirec/src/pages/listing_pages/GeneralShowMore.js",["113","114"],"import React, { Fragment, useEffect } from \"react\";\nimport \"./GeneralShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport {useQuery, gql} from '@apollo/client'\n \nexport default function GeneralShowMore(){\n    // query for data\n    const params = useParams();\n    const location = useLocation();\n    const {error, loading, data, refetch} = useQuery(location.state.query,\n        {\n            variables:\n            {\n                page: params.pageNum\n            }\n        }\n    );\n\n    useEffect(()=>{\n        refetch()\n       }, []\n    );\n\n\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n        const rows = chunk(data.Page.media, 4)\n        return (\n            <Fragment>\n                <TopSpace />\n                <Container className=\"\">\n                    {/* back btn */}\n                    <Row id=\"back_btn_space\">\n                        <Link className=\"back_btn\" to={\"/Anime\"}>\n                            <Button className=\"back_btn\" id=\"btn-right\"><strong>Home</strong></Button>\n                        </Link>\n                    </Row>\n                    <Grid id=\"grid\">\n                        {/* main grid content  */}\n                        {rows.map((cols) => (\n                            <Row>\n                                {cols.map((col) => (\n                                    <Col md={3} id=\"grid-content\">\n                                        <ListingPageShowCard   \n                                            id={col.id}\n                                            image={col.coverImage.large} \n                                            name={(col.title.english==null)\n                                                ? col.title.romaji :\n                                                col.title.english}\n                                            genre={col.genres}\n                                            studio={(col.studios.nodes.length > 5) ? col.studios.nodes.slice(0,6).map(studio_name => \n                                                studio_name.name).join(', ') :\n                                                col.studios.nodes.map(studio_name => \n                                                studio_name.name).join(', ')}/>\n                                    </Col>\n                                )\n                                )}\n                            </Row>\n                        )\n                        )}\n                    </Grid>\n                    {/* pagination */}\n                    {(params.pageNum > 1) ?\n                                    ((params.pageNum > data.length -Number(1)) ?\n                                        <Link to={{\n                                            pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) - 1}`,\n                                            state: {\n                                                query: location.state.query\n                                            }\n                                        }}>\n                                            <Button className=\"page-btn\">\n                                                Previous Page\n                                            </Button>\n                                        </Link> :\n                                        <Fragment>\n                                                <Link to={{\n                                                    pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) - 1}`,\n                                                    state: {\n                                                        query: location.state.query\n                                                    }}}>\n                                                    <Button  className=\"page-btn\">\n                                                        Previous Page\n                                                    </Button>\n                                                </Link>\n                                                <Link to={{\n                                                    pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) + 1}`,\n                                                    state: {\n                                                        query: location.state.query\n                                                    }\n                                                }}>\n                                                    <Button  className=\"page-btn\">\n                                                        Next Page\n                                                    </Button>\n                                                </Link> \n                                        </Fragment> ): \n                                    <Link to={{\n                                        pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) + 1}`,\n                                            state: {\n                                                query: location.state.query\n                                        }}}>\n                                        <Button  className=\"page-btn\">\n                                            Next Page\n                                        </Button>\n                                    </Link>\n                                } \n                </Container>\n            </Fragment>\n        );\n    }\n}","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js",["115"],"import React, {useState, useCallback, Fragment} from 'react';\nimport { Link } from \"react-router-dom\"\nimport MySurvey from './surveyType';\nconst axios = require('axios').default;\nlet nametotake = \"\";\n\n{/*\n    Author: Caitlin-Dawn Sangcap\n    Spring 2021. CSCI 499 - Capstone Project: AniRec\n\n    Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n    Survey heirarchy: questions --> surveyType --> surveyOne\n    This file holds the survey logic.\n\n    what it currently does:\n     - allows the users to take the survey\n     - all needed answers are gathered\n     - send the survey responses to the backend\n     \n    Issues:\n        problem titles (DON'T CLICK ON):\n         - Action --> Hunter x Hunter\n         - Adventure --> Sword Art Online (gets error ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all())\n         - Fantasy --> something wrong with the whole section\n         - Magical Girl --> something wrong with the whole section\n\n        Removed portions:\n         - commented out the setFinalPage() due to time constraints\n           - was originally meant to display custom Thank you page.\n        \n        Backend related:\n         - once the watched_anime field in the backend reaches or gets close to 50 charcters,\n           the backend will start sending 500 errors\n           EXAMPLE ERROR:\n                django.db.utils.DataError: value too long for type character varying(50)\n\n*/}\n\n//function to send all the data to the backend\n// copied from Deondre's work\nfunction register(formData1){\n    axios({\n        method: \"post\",\n        url: \"http://localhost:5000/anime\",\n        data: formData1,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n        .then(function (response) {\n          //handle success\n          console.log(response);\n        })\n        .catch(function (response) {\n          //handle error\n          console.log(response);\n        });\n        //console.log(\"sent request\");\n    }\n\nconst SurveyOne = () => {\n\n    const [showPage, setShowPage] = useState(true);\n\n    //function takes the data from the user and sends it to the backend.\n    // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n    const onCompletePage = useCallback((data)=> {\n        //console.log(\"This is from the surveyOne2.js file \",data);\n        setShowPage(!showPage);\n\n        let response = data; // to play around with the data\n        console.log(data);\n        let titles = []; //store all the wanted titles from the survey \n        let send_data = []; //store all the FormData to be sent\n        let char_count = 0; //keep track of the amount of characters in titles to avoid errors\n        let username = response.Username;\n        nametotake = username;\n\n        //console.log(username);\n        //get list of all prefered genres\n        let desired_genres = response.prefered_genres;\n\n        //go through all the desired genres\n        for (var x = 0; x < desired_genres.length; x++) {\n            let selected_genre = desired_genres[x];\n\n            //console.log(response[selected_genre][\"Yes\"]);\n            //yes answers\n            if (response[selected_genre][\"Yes\"] != null){\n                //get the yes titles\n                let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"];\n                //console.log(yes_titles);\n                for (var y = 0; y < yes_titles.length; y++){\n                    //console.log(\"yes\",yes_titles[y]);\n                    //add the yes_titles to titles\n                    if (titles.includes(yes_titles[y]) === false){\n                        //console.log(\"yes\",yes_titles[y]);\n                        titles.push(yes_titles[y]);\n                        \n                    }\n                }\n            }\n\n            //maybe answers\n            if(response[selected_genre][\"Maybe\"] != null){\n                //get the maybe titles\n                let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"];\n                //console.log(maybe_titles);\n                for( var m = 0; m < maybe_titles.length; m++){\n                    //console.log(\"maybe\",maybe_titles[m]);\n                    //add the maybe_titles to titles\n                    if (titles.includes(maybe_titles[m]) === false) {\n                        //console.log(\"maybe\",maybe_titles[m]);\n                        titles.push(maybe_titles[m]);\n                    }\n                }\n            }\n        }\n        //console.log(titles.length);\n\n        //making the different formData to be send to the backend\n        for( var a =0; a < titles.length; a++){\n            if( char_count <= 50){\n                char_count = char_count + titles[a].length + 2;\n                let bodyFormData = new FormData();\n                bodyFormData.append(\"username\", username);\n                bodyFormData.append(\"anime\", titles[a]);\n                send_data.push(bodyFormData);\n            }\n        }\n\n        console.log(send_data.length);\n        //sending the data to the backend\n        send_data.forEach(element => {\n            register(element)\n        });\n        \n    }, [showPage])\n\n    //can customize the thank you page for what we want. not mandatory.\n    // removed from use due to time constraints\n    /*const setFinalPage = () => {\n        return(\n            <main>\n                <h1>Thank you for taking the survey. Please wait while we build your recommendations.</h1>\n            </main>\n        )\n    }*/\n\n    return(\n        <Fragment>\n            <MySurvey showCompletedPage={data=>onCompletePage(data)} />\n            <button><a href=\"/Anime\">Head to AniRec</a></button>\n            <Link to ={{\n                pathname:\"/Anime\",\n                state:{\n                    user:nametotake\n                }\n            }}>\n            <button>Head to AniRec</button>\n            </Link>\n        </Fragment>\n        \n    )\n}\n\nexport default SurveyOne;\n","/home/jason/AniRec/test/anirec/src/pages/landing_page/Wallpaper.js",["116"],"import React, { Fragment, useEffect } from \"react\";\nimport {useQuery, gql} from '@apollo/client'\nimport \"./Wallpaper.css\"\n\nexport default function Wallpaper(){\n    // query for wallpaper\n    const WALLPAPER = gql`\n    {\n        Page(page: 1, perPage: 48) {\n            media(sort: POPULARITY_DESC, isAdult: false, type: ANIME) {\n                coverImage{\n                    extraLarge\n                }\n                bannerImage\n            }\n        }\n    }\n    `;\n\n    const {error, loading, data} = useQuery(WALLPAPER);\n\n    useEffect(()=>{\n       }, [data]\n    );\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n    return(\n        <Fragment>\n            <div className=\"img-wrapper\">\n                {/* gray overlay */}\n                <div className=\"img-overlay\"></div>\n                {/* img under */}\n                <div className=\"img-box\">\n                    <img className=\"wallpaper-img\" src={data.Page.media[13].bannerImage}/>\n                </div>\n            </div>\n            \n        </Fragment>\n\n    );}\n}","/home/jason/AniRec/test/anirec/src/pages/content_pages/show_page.js",["117","118","119","120","121"],"/home/jason/AniRec/test/anirec/src/components/animepages.component.js",["122","123"],"/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js",["124","125","126"],"import React, {useEffect, setState} from \"react\";\nimport {useQuery, gql} from '@apollo/client';\n\nexport default function GetUserRecs(props){\n    const [recArr, setRecArr] = setState([]);\n    const axios = require('axios').default;\n    const promise = axios.get('http://localhost:5000');\n\n    useEffect(() => {\n        GetUserRecs().then((data) => {\n            for (var user in data){\n                if (data[user][\"fields\"][\"username\"] == props.username){\n                    var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n                    for (var i = 0; i < recArray.length; i++){\n                        recArray[i] = parseInt(recArray[i], 10);\n                    } \n                    setRecArr(recArray);\n                }\n            }\n        })\n        \n    }, []);\n    const returnRecArr = []\n\n    for (let i = 0; i < props.num; i++) {\n        returnRecArr.push(<RecQueryComponent arrayOfIDs={recArr} index={i}/>);\n    }\n    return returnRecArr;\n}\n\n\nconst RecQueryComponent = ({arrayOfIDs, index}) =>{\n\n    const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n    const RecArray = arrayOfIDs;\n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables:{\n                id: RecArray[index]\n            }\n        });\n\n    if (loading) return <p>Loading1...</p>\n    if (error) return <p>Error1 :(</p>\n    return data\n}","/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js",["127","128"],"import React, { Fragment, useEffect, setState  } from \"react\";\n\nimport {useQuery, gql} from '@apollo/client'\n\n\nexport default function GetShow(props) {\n    const {showID, setShowID} = setState(props.id)\n    const REC_QUERY = gql`\n    query RecQuery($id: Int) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n    \n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables: {\n                id: showID\n            }\n        })\n    \n    useEffect(()=>{\n        setShowID(showID);\n        }, []\n    );\n\n    if (loading) return <p>Loading2...</p>\n    if (error) return <p>Error2 :(</p>\n\n    return {data};\n}","/home/jason/AniRec/test/anirec/src/pages/listing_pages/UserSpecificShowMore.js",["129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":13,"column":8,"nodeType":"136","messageId":"137","endLine":13,"endColumn":14},{"ruleId":"138","severity":1,"message":"139","line":19,"column":53,"nodeType":"140","messageId":"141","endLine":19,"endColumn":55},{"ruleId":null,"fatal":true,"severity":2,"message":"142","line":22,"column":30},{"ruleId":"143","severity":1,"message":"144","line":22,"column":33,"nodeType":"145","endLine":22,"endColumn":57},{"ruleId":"146","severity":1,"message":"147","line":60,"column":61,"nodeType":"145","endLine":60,"endColumn":64},{"ruleId":"143","severity":1,"message":"144","line":19,"column":21,"nodeType":"145","endLine":19,"endColumn":64},{"ruleId":"146","severity":1,"message":"147","line":45,"column":61,"nodeType":"145","endLine":45,"endColumn":64},{"ruleId":"134","severity":1,"message":"148","line":1,"column":38,"nodeType":"136","messageId":"137","endLine":1,"endColumn":46},{"ruleId":"134","severity":1,"message":"149","line":8,"column":27,"nodeType":"136","messageId":"137","endLine":8,"endColumn":37},{"ruleId":"150","severity":1,"message":"151","line":52,"column":11,"nodeType":"152","endLine":52,"endColumn":13,"suggestions":"153"},{"ruleId":"134","severity":1,"message":"154","line":9,"column":19,"nodeType":"136","messageId":"137","endLine":9,"endColumn":22},{"ruleId":"150","severity":1,"message":"151","line":26,"column":11,"nodeType":"152","endLine":26,"endColumn":13,"suggestions":"155"},{"ruleId":"156","severity":1,"message":"157","line":7,"column":1,"nodeType":"158","messageId":"159","endLine":37,"endColumn":4},{"ruleId":"143","severity":1,"message":"144","line":36,"column":21,"nodeType":"145","endLine":36,"endColumn":91},{"ruleId":"134","severity":1,"message":"160","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"149","line":4,"column":56,"nodeType":"136","messageId":"137","endLine":4,"endColumn":66},{"ruleId":"150","severity":1,"message":"151","line":52,"column":8,"nodeType":"152","endLine":52,"endColumn":10,"suggestions":"161"},{"ruleId":"146","severity":1,"message":"147","line":109,"column":61,"nodeType":"145","endLine":109,"endColumn":64},{"ruleId":"143","severity":1,"message":"144","line":124,"column":45,"nodeType":"145","endLine":124,"endColumn":74},{"ruleId":"134","severity":1,"message":"160","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":26},{"ruleId":"134","severity":1,"message":"162","line":4,"column":10,"nodeType":"136","messageId":"137","endLine":4,"endColumn":14},{"ruleId":"134","severity":1,"message":"163","line":7,"column":11,"nodeType":"136","messageId":"137","endLine":7,"endColumn":18},{"ruleId":"164","severity":1,"message":"165","line":12,"column":54,"nodeType":"166","messageId":"167","endLine":12,"endColumn":56},{"ruleId":"150","severity":1,"message":"168","line":22,"column":8,"nodeType":"152","endLine":22,"endColumn":10,"suggestions":"169"},{"ruleId":"134","severity":1,"message":"170","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":25},{"ruleId":"150","severity":1,"message":"171","line":41,"column":12,"nodeType":"152","endLine":41,"endColumn":14,"suggestions":"172"},{"ruleId":"134","severity":1,"message":"173","line":12,"column":11,"nodeType":"136","messageId":"137","endLine":12,"endColumn":17},"no-native-reassign",["174"],"no-negated-in-lhs",["175"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Parsing error: Unexpected token\n\n\u001b[0m \u001b[90m 20 |\u001b[39m     \u001b[36mconst\u001b[39m tryShowArray \u001b[33m=\u001b[39m location\u001b[33m.\u001b[39mstate\u001b[33m.\u001b[39mtryShowIDs\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 21 |\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 22 |\u001b[39m     \u001b[36mconst\u001b[39m recShowToDisplay \u001b[33m=\u001b[39m \u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    |\u001b[39m                              \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 23 |\u001b[39m     \u001b[36mconst\u001b[39m tryShowToDisplay \u001b[33m=\u001b[39m \u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 24 |\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 |\u001b[39m     \u001b[90m// query for data\u001b[39m\u001b[0m","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["176"],"'gql' is defined but never used.",["177"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Component' is defined but never used.",["178"],"'Link' is defined but never used.","'promise' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'props.username' and 'setRecArr'. Either include them or remove the dependency array.",["179"],"'Fragment' is defined but never used.","React Hook useEffect has missing dependencies: 'setShowID' and 'showID'. Either include them or remove the dependency array.",["180"],"'params' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"181","fix":"183"},{"desc":"181","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},"Update the dependencies array to be: [refetch]",{"range":"189","text":"190"},{"range":"191","text":"190"},{"range":"192","text":"190"},"Update the dependencies array to be: [props.username, setRecArr]",{"range":"193","text":"194"},"Update the dependencies array to be: [setShowID, showID]",{"range":"195","text":"196"},[1486,1488],"[refetch]",[843,845],[1263,1265],[799,801],"[props.username, setRecArr]",[876,878],"[setShowID, showID]"]