[{"/home/jason/AniRec/test/anirec/src/index.js":"1","/home/jason/AniRec/test/anirec/src/App.js":"2","/home/jason/AniRec/test/anirec/src/components/global_elements/TopSpacer.js":"3","/home/jason/AniRec/test/anirec/src/components/global_elements/Header.js":"4","/home/jason/AniRec/test/anirec/src/GraphQL/Queries.js":"5","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyType.js":"6","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/questions.js":"7","/home/jason/AniRec/test/anirec/src/pages/home_page/Homepage.js":"8","/home/jason/AniRec/test/anirec/src/pages/landing_page/LandingPage.js":"9","/home/jason/AniRec/test/anirec/src/pages/landing_page/login_register_tabs.component.js":"10","/home/jason/AniRec/test/anirec/src/components/HomePageShowCard.js":"11","/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js":"12","/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js":"13","/home/jason/AniRec/test/anirec/src/components/ListingPageShowCard.js":"14","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js":"15","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GeneralShowMore.js":"16","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js":"17","/home/jason/AniRec/test/anirec/src/pages/landing_page/Wallpaper.js":"18","/home/jason/AniRec/test/anirec/src/pages/content_pages/show_page.js":"19","/home/jason/AniRec/test/anirec/src/components/animepages.component.js":"20","/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js":"21","/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js":"22","/home/jason/AniRec/test/anirec/src/pages/listing_pages/UserSpecificShowMore.js":"23"},{"size":268,"mtime":1621143225643,"results":"24","hashOfConfig":"25"},{"size":2216,"mtime":1621143225643,"results":"26","hashOfConfig":"25"},{"size":195,"mtime":1621143225643,"results":"27","hashOfConfig":"25"},{"size":1482,"mtime":1621143225643,"results":"28","hashOfConfig":"25"},{"size":3528,"mtime":1621143225643,"results":"29","hashOfConfig":"25"},{"size":495,"mtime":1621143225679,"results":"30","hashOfConfig":"25"},{"size":39184,"mtime":1621143225679,"results":"31","hashOfConfig":"25"},{"size":9275,"mtime":1621146675327,"results":"32","hashOfConfig":"25"},{"size":773,"mtime":1621143225643,"results":"33","hashOfConfig":"25"},{"size":2149,"mtime":1621146072967,"results":"34","hashOfConfig":"25"},{"size":4090,"mtime":1621143225643,"results":"35","hashOfConfig":"25"},{"size":3566,"mtime":1621146499137,"results":"36","hashOfConfig":"25"},{"size":2074,"mtime":1621146434120,"results":"37","hashOfConfig":"25"},{"size":3447,"mtime":1621143225643,"results":"38","hashOfConfig":"25"},{"size":5003,"mtime":1621143225679,"results":"39","hashOfConfig":"25"},{"size":5702,"mtime":1621143225679,"results":"40","hashOfConfig":"25"},{"size":6905,"mtime":1621144090838,"results":"41","hashOfConfig":"25"},{"size":1085,"mtime":1621143225643,"results":"42","hashOfConfig":"25"},{"size":6927,"mtime":1621143225643,"results":"43","hashOfConfig":"25"},{"size":1578,"mtime":1621143225643,"results":"44","hashOfConfig":"25"},{"size":1788,"mtime":1621143225643,"results":"45","hashOfConfig":"25"},{"size":959,"mtime":1621144032466,"results":"46","hashOfConfig":"25"},{"size":2599,"mtime":1621143225679,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"dui8tn",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"50"},"/home/jason/AniRec/test/anirec/src/index.js",[],["107","108"],"/home/jason/AniRec/test/anirec/src/App.js",["109","110"],"import { React, Fragment } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport LandingPage from \"./pages/landing_page/LandingPage.js\";\nimport Homepage from \"./pages/home_page/Homepage.js\";\nimport SurveyOne from \"./pages/landing_page/survey_page/surveyOne.js\"\nimport \"./App.css\";\nimport GeneralShowMore from \"./pages/listing_pages/GeneralShowMore\";\nimport AnimePage from \"./pages/content_pages/show_page.js\";\n\nimport {ApolloClient, InMemoryCache, ApolloProvider, HttpLink, from, } from '@apollo/client'\nimport {onError} from '@apollo/client/link/error'\n\nimport Header from \"./components/global_elements/Header.js\";\nimport GenresShowMore from \"./pages/listing_pages/GenresShowMore\";\nimport UserShowMore from \"./pages/listing_pages/UserSpecificShowMore\"\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors){\n    graphqlErrors.map(({ message, location, path }) => {\n      alert(`GraphQL error $(message)`);\n    });\n  }\n});\n\nconst link = from([\n  errorLink, new HttpLink({uri: 'https://graphql.anilist.co/', fetchOptions: {method: 'POST'}, useGETForQueries: false})\n]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nfunction App() {\n      return (\n        <ApolloProvider client={client}>\n        {\" \"}\n          <Fragment>\n            <Router>\n              <Switch>\n                <Route path=\"/\" exact component={() => <LandingPage />} />\n                <Route path=\"/Anime\" exact component={() => <Homepage />} />\n                <Route path=\"/Survey\" exact component={() => <SurveyOne />} />\n                <Route path=\"/GenresShowMore/:genreName/:pageNum\" exact component={() => <GenresShowMore />}/>\n                <Route path=\"/ShowMore/:queryName/:pageNum\" exact component={() => <GeneralShowMore />}/>\n                <Route path=\"/ShowMore/:dataName/:pageNum\" exact component={() => <UserShowMore />}/>\n                <Route path=\"/AnimePage/:animeId/:partDisplay?\" exact component={() => <AnimePage />} />\n              </Switch>\n            </Router>\n          </Fragment>\n        </ApolloProvider>\n      );\n}\n\n//<Route path=\"/ShowMore/:tag\" component={UserPage}/>\n\n\nexport default App;\n","/home/jason/AniRec/test/anirec/src/components/global_elements/TopSpacer.js",[],"/home/jason/AniRec/test/anirec/src/components/global_elements/Header.js",[],"/home/jason/AniRec/test/anirec/src/GraphQL/Queries.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyType.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/questions.js",[],"/home/jason/AniRec/test/anirec/src/pages/home_page/Homepage.js",["111","112","113","114","115","116"],"/home/jason/AniRec/test/anirec/src/pages/landing_page/LandingPage.js",[],"/home/jason/AniRec/test/anirec/src/pages/landing_page/login_register_tabs.component.js",[],"/home/jason/AniRec/test/anirec/src/components/HomePageShowCard.js",["117","118"],"import React, { Fragment } from \"react\";\r\nimport \"./HomePageShowCard.css\";\r\n//frame for the anime to show\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n//import GenreQuery from \"./dynamic_genre_query\";\r\n\r\nfunction HomePageShowCard(props){\r\n    let genreCount = props.genre.length\r\n\r\n    return(\r\n        <Fragment>\r\n            {/* Start of HomePageCard*/}\r\n                <Container className=\"homepage-card-outer\">\r\n                    <Row id=\"homepage-card-inner\">\r\n\r\n                        {/* Start of Show Image on Left-Side*/}\r\n                        <Col className=\"homepage-card-img\">\r\n                            <Link to={{\r\n                                        pathname:`/AnimePage/${props.id}`\r\n                                    }}>\r\n                                <img src={props.image}/>\r\n                                <div className=\"homepage-card-hover-info\">\r\n                                    <p>{props.description}</p>\r\n                                </div>\r\n                            </Link>\r\n                        </Col>\r\n                        {/* End of Show Image on Left-Side*/}\r\n\r\n                        {/* Start of Show Description on Right-Side*/}\r\n                        <Col id=\"homepage-card-description\">\r\n\r\n                            {/* Start of Show Title*/}\r\n                            <Row id=\"homepage-card-title\">\r\n                                <Link id=\"homepage-card-title-text\"to={{\r\n                                        pathname:`/AnimePage/${props.id}`,\r\n                                    }}>\r\n                                <p id=\"homepage-card-text\">{props.name}</p>\r\n                                </Link>\r\n                            </Row>\r\n                            {/* End of Show Title*/}\r\n                            \r\n                            {/* Start of Show's Genres*/}\r\n                            <Row id=\"homepage-card-genres\">\r\n                                <p id=\"homepage-card-text\">\r\n                                    {/* Mapping each one to a Link to GenreShowMore*/}\r\n                                    {props.genre.map((genres) =>\r\n                                        {\r\n                                            if (genreCount < 2)\r\n                                                return <Link key={genres} className=\"homepage-card-tag-links\" to={{\r\n                                                            pathname:`/GenresShowMore/${genres}/1`\r\n                                                        }}>{genres}</Link>\r\n                                            else \r\n                                                genreCount--;\r\n                                                return  <Fragment>\r\n                                                            <Link key={genres} className=\"homepage-card-tag-links\" to={{\r\n                                                                pathname:`/GenresShowMore/${genres}/1`\r\n                                                                }}>{genres}\r\n                                                            </Link>\r\n                                                            <a>, </a>\r\n                                                        </Fragment>\r\n                                        }\r\n                                    )}\r\n                                </p>\r\n                            </Row>\r\n                            {/* End of Show's Genres*/}\r\n\r\n                            {/* Start of Show's Studio*/}\r\n                            <Row id=\"homepage-card-studio\">\r\n                                <p id=\"homepage-card-text\">{props.studio}</p>\r\n                            </Row>\r\n                            {/* End of Show's Studio*/}\r\n\r\n                        </Col>\r\n                        {/* End of Show Description on Right-Side*/}\r\n\r\n                    </Row>\r\n                </Container>\r\n                {/* End of HomePageCard*/}                \r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default HomePageShowCard;","/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js",["119","120"],"/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js",[],"/home/jason/AniRec/test/anirec/src/components/ListingPageShowCard.js",["121","122"],"import React, { Fragment} from \"react\";\nimport \"./ListingPageShowCard.css\";\n//frame for the anime to show\nimport { Container, Row } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\n\nfunction ListingPageShowCard(props){\n    let genreCount = props.genre.length\n\n    return(\n        <Fragment>\n            <Container className=\"float-center\" id=\"listingpage-card-outer\">\n                {/* left side */}\n                <Row id=\"listingpage-card-image\">\n                    <Link to={{\n                                pathname:`/AnimePage/${props.id}`,\n                            }}>\n                    <img src={props.image} className=\"center\"/> \n                    {/* sliding description */}\n                        <div className=\"listingpage-card-hover-info-outer\">\n                            <div id=\"listingpage-card-hover-info-inner\">\n                                <Row id=\"listingpage-card-title\">\n                                    <Link id=\"listingpage-card-title-text\" to={{\n                                        pathname:`/AnimePage/${props.id}`,\n                                    }}>\n                                    <p className=\"listingpage-card-text-large\"><strong>{props.name}</strong></p>\n                                    </Link>\n                                </Row>\n                                <Row id=\"listingpage-card-genre\">\n                                    <p className=\"listingpage-card-text-small\">\n                                    {props.genre.map((genres) =>\n                                        {\n                                            if (genreCount < 2)\n                                                return <Link key={genres} className=\"listingpage-card-tag-links\" to={{\n                                                            pathname:`/GenresShowMore/${genres}/1`\n                                                        }}>{genres}</Link>\n                                            else \n                                                genreCount--;\n                                                return  <Fragment>\n                                                            <Link key={genres} className=\"listingpage-card-tag-links\" to={{\n                                                                pathname:`/GenresShowMore/${genres}/1`\n                                                                }}>{genres}\n                                                            </Link>\n                                                            <a>, </a>\n                                                        </Fragment>\n                                            }\n                                    )}\n                                    </p>\n                                </Row>\n                                <Row id=\"listingpage-card-studios\">\n                                    <p className=\"listingpage-card-text-small\">\n                                        {props.studio}      \n                                    </p>\n                                </Row>\n                            </div>\n                        </div>\n                        <Row id=\"listingpage-card-studios\">\n                            <p id=\"listingpage-card-text\">{props.studio}</p>\n                        </Row>\n                    </Link>\n                </Row>\n            </Container>\n        </Fragment>\n\n    );\n}\nexport default ListingPageShowCard;","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js",["123","124","125"],"import React, { Fragment, useEffect, useState } from \"react\";\nimport \"./GenresShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport {useQuery, gql} from '@apollo/client'\n\nexport default function GenresShowMore(){    \n    // genre query \n    const GENRE_QUERY = gql`\n    query GenreQuery($genre: String, $page: Int) {\n        Page(page: $page, perPage: 48){\n            media(type: ANIME, isAdult: false, genre: $genre, sort: [POPULARITY_DESC]){\n              id\n              title{\n                english\n                romaji\n              }\n              genres\n              description\n              coverImage{\n                medium\n                large\n                extraLarge\n              }\n              studios{\n                nodes{\n                  name\n                }\n              }\n            }\n        }\n    }`;\n\n    // get data \n    const params = useParams();\n    const {error, loading, data, refetch} = useQuery(GENRE_QUERY, \n        {\n            variables: \n                {\n                    genre:params.genreName,\n                    page:params.pageNum\n                }\n        }\n    );\n\n    useEffect(()=>{\n        refetch()\n       }, []\n    );\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n        const rows = chunk(data.Page.media, 4)\n        return (\n            <Fragment>\n                <TopSpace />\n                <Container className=\"\">\n                    {/* back btn */}\n                    <Row id=\"back_btn_space\">\n                        <Link to={\"/Anime\"}>\n                            <Button className=\"back_btn\"><strong>Home</strong></Button>\n                        </Link>\n                    </Row>\n                    {/* main content grid */}\n                    <Grid id=\"grid\">\n                        {rows.map((cols) => (\n                            <Row>\n                                {cols.map((col) => (\n                                    <Col md={3} id=\"grid-content\">\n                                        <ListingPageShowCard   \n                                            id={col.id}\n                                            image={col.coverImage.extraLarge} \n                                            name={(col.title.english==null)\n                                                ? col.title.romaji :\n                                                col.title.english}\n                                            genre={col.genres}\n                                            studio={col.studios.nodes.map(studio_name => \n                                                studio_name.name).join(', ')}/>\n                                    </Col>\n                                )\n                                )}\n                            </Row>\n                        )\n                        )}\n                        </Grid>\n                        {/* pagination */}\n                    {(params.pageNum > 1) ?\n                                ((params.pageNum > data.length -Number(1)) ?\n                                    <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`}}>\n                                        <Button className=\"page-btn\">\n                                            Previous Page\n                                        </Button>\n                                    </Link> :\n                                    <Fragment>\n                                            <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`}}>\n                                                <Button  className=\"page-btn\">\n                                                    Previous Page\n                                                </Button>\n                                            </Link>\n                                            <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`}}>\n                                                <Button  className=\"page-btn\">\n                                                    Next Page\n                                                </Button>\n                                            </Link> \n                                    </Fragment> ): \n                                <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`}}>\n                                    <Button  className=\"page-btn\">\n                                        Next Page\n                                    </Button>\n                                </Link>\n                            }\n                </Container>\n            </Fragment>\n        );\n    }\n}","/home/jason/AniRec/test/anirec/src/pages/listing_pages/GeneralShowMore.js",["126","127"],"import React, { Fragment, useEffect } from \"react\";\nimport \"./GeneralShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport {useQuery, gql} from '@apollo/client'\n \nexport default function GeneralShowMore(){\n    // query for data\n    const params = useParams();\n    const location = useLocation();\n    const {error, loading, data, refetch} = useQuery(location.state.query,\n        {\n            variables:\n            {\n                page: params.pageNum\n            }\n        }\n    );\n\n    useEffect(()=>{\n        refetch()\n       }, []\n    );\n\n\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n        const rows = chunk(data.Page.media, 4)\n        return (\n            <Fragment>\n                <TopSpace />\n                <Container className=\"\">\n                    {/* back btn */}\n                    <Row id=\"back_btn_space\">\n                        <Link className=\"back_btn\" to={\"/Anime\"}>\n                            <Button className=\"back_btn\" id=\"btn-right\"><strong>Home</strong></Button>\n                        </Link>\n                    </Row>\n                    <Grid id=\"grid\">\n                        {/* main grid content  */}\n                        {rows.map((cols) => (\n                            <Row>\n                                {cols.map((col) => (\n                                    <Col md={3} id=\"grid-content\">\n                                        <ListingPageShowCard   \n                                            id={col.id}\n                                            image={col.coverImage.large} \n                                            name={(col.title.english==null)\n                                                ? col.title.romaji :\n                                                col.title.english}\n                                            genre={col.genres}\n                                            studio={(col.studios.nodes.length > 5) ? col.studios.nodes.slice(0,6).map(studio_name => \n                                                studio_name.name).join(', ') :\n                                                col.studios.nodes.map(studio_name => \n                                                studio_name.name).join(', ')}/>\n                                    </Col>\n                                )\n                                )}\n                            </Row>\n                        )\n                        )}\n                    </Grid>\n                    {/* pagination */}\n                    {(params.pageNum > 1) ?\n                                    ((params.pageNum > data.length -Number(1)) ?\n                                        <Link to={{\n                                            pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) - 1}`,\n                                            state: {\n                                                query: location.state.query\n                                            }\n                                        }}>\n                                            <Button className=\"page-btn\">\n                                                Previous Page\n                                            </Button>\n                                        </Link> :\n                                        <Fragment>\n                                                <Link to={{\n                                                    pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) - 1}`,\n                                                    state: {\n                                                        query: location.state.query\n                                                    }}}>\n                                                    <Button  className=\"page-btn\">\n                                                        Previous Page\n                                                    </Button>\n                                                </Link>\n                                                <Link to={{\n                                                    pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) + 1}`,\n                                                    state: {\n                                                        query: location.state.query\n                                                    }\n                                                }}>\n                                                    <Button  className=\"page-btn\">\n                                                        Next Page\n                                                    </Button>\n                                                </Link> \n                                        </Fragment> ): \n                                    <Link to={{\n                                        pathname:`/ShowMore/${params.queryName}/${Number(params.pageNum) + 1}`,\n                                            state: {\n                                                query: location.state.query\n                                        }}}>\n                                        <Button  className=\"page-btn\">\n                                            Next Page\n                                        </Button>\n                                    </Link>\n                                } \n                </Container>\n            </Fragment>\n        );\n    }\n}","/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js",["128","129","130","131","132"],"import React, {useState, useCallback, Fragment, useEffect} from 'react';\nimport MySurvey from './surveyType';\nimport {Link, useLocation} from \"react-router-dom\";\nconst axios = require('axios').default;\n\nlet nametotake = \"\";\nlet recShowIDs= [];\n\n{/*\n    Author: Caitlin-Dawn Sangcap\n    Spring 2021. CSCI 499 - Capstone Project: AniRec\n\n    Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n    Survey heirarchy: questions --> surveyType --> surveyOne\n    This file holds the survey logic.\n\n    what it currently does:\n     - allows the users to take the survey\n     - all needed answers are gathered\n     - send the survey responses to the backend\n     - send the username to the Homepage\n     \n    Issues:\n        problem titles (DON'T CLICK ON):\n         - Action --> Hunter x Hunter\n         - Adventure --> Sword Art Online (gets error ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all())\n\n        Commented out portions:\n         - commented out the setFinalPage() due to time constraints\n           - was originally meant to display custom Thank you page.\n        \n        Backend related:\n         - once the watched_anime field in the backend reaches or gets close to 50 charcters,\n           the backend will start sending 500 errors\n           EXAMPLE ERROR:\n                django.db.utils.DataError: value too long for type character varying(50)\n\n*/}\n\n\n\n//function to send all the data to the backend\n// copied from Deondre's work\nfunction register(formData1){\n    axios({\n        method: \"post\",\n        url: \"http://localhost:5000/anime\",\n        data: formData1,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n        .then(function (response) {\n          //handle success\n          console.log(response);\n        })\n        .catch(function (response) {\n          //handle error\n          console.log(response);\n        });\n        //console.log(\"sent request\");\n    }\n\n\n\nconst SurveyOne = () => {\n\n    \n\n    const [showPage, setShowPage] = useState(true);\n\n    //function takes the data from the user and sends it to the backend.\n    // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n    const onCompletePage = useCallback((data)=> {\n        //console.log(\"This is from the surveyOne2.js file \",data);\n        setShowPage(!showPage);\n\n        let response = data; // to play around with the data\n        console.log(data);\n        let titles = []; //store all the wanted titles from the survey \n        let send_data = []; //store all the FormData to be sent\n        let char_count = 0; //keep track of the amount of characters in titles to avoid errors\n        let username = response.Username;\n        nametotake=username;\n\n        //console.log(username);\n        //get list of all prefered genres\n        let desired_genres = response.prefered_genres;\n\n        //go through all the desired genres\n        for (var x = 0; x < desired_genres.length; x++) {\n            let selected_genre = desired_genres[x];\n\n            //console.log(response[selected_genre][\"Yes\"]);\n            //yes answers\n            if (response[selected_genre][\"Yes\"] != null){\n                //get the yes titles\n                let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"];\n                //console.log(yes_titles);\n                for (var y = 0; y < yes_titles.length; y++){\n                    //console.log(\"yes\",yes_titles[y]);\n                    //add the yes_titles to titles\n                    if (titles.includes(yes_titles[y]) === false){\n                        //console.log(\"yes\",yes_titles[y]);\n                        titles.push(yes_titles[y]);\n                        \n                    }\n                }\n            }\n\n            //maybe answers\n            if(response[selected_genre][\"Maybe\"] != null){\n                //get the maybe titles\n                let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"];\n                //console.log(maybe_titles);\n                for( var m = 0; m < maybe_titles.length; m++){\n                    //console.log(\"maybe\",maybe_titles[m]);\n                    //add the maybe_titles to titles\n                    if (titles.includes(maybe_titles[m]) === false) {\n                        //console.log(\"maybe\",maybe_titles[m]);\n                        titles.push(maybe_titles[m]);\n                    }\n                }\n            }\n        }\n        //console.log(titles.length);\n\n        //making the different formData to be send to the backend\n        for( var a =0; a < titles.length; a++){\n            if( char_count <= 50){\n                char_count = char_count + titles[a].length + 2;\n                let bodyFormData = new FormData();\n                bodyFormData.append(\"username\", username);\n                bodyFormData.append(\"anime\", titles[a]);\n                send_data.push(bodyFormData);\n            }\n        }\n\n        //console.log(send_data.length);\n        //sending the data to the backend\n        send_data.forEach(element => {\n            register(element)\n        });\n        \n    }, [showPage])\n\n    //can customize the thank you page for what we want. not mandatory.\n    // removed from use due to time constraints\n    /*const setFinalPage = () => {\n        return(\n            <main>\n                <h1>Thank you for taking the survey. Please wait while we build your recommendations.</h1>\n            </main>\n        )\n    }*/\n\n    const location = useLocation();\n    let recArray = [];\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [users, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setItems(result);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n    }, [])\n\n    users.forEach(element => {\n        if (element.fields.username == nametotake){\n            console.log(element.fields.username);\n            recArray = element.fields.recommendations.match(/\\d+/g);\n            for (var i = 0; i < recArray.length; i++){\n                recArray[i] = parseInt(recArray[i], 10);\n            }\n        }\n    })\n\n    //console.log(\"recArray\",recArray);\n    recShowIDs = recArray;\n    console.log(recShowIDs);\n\n    \n    return(\n        <Fragment>\n            <MySurvey showCompletedPage={data=>onCompletePage(data)} />\n            <Link to ={{\n                pathname:\"/Anime\",\n                state:{\n                    user:nametotake,\n                    recs:recShowIDs\n                }\n            }}>\n            <button>Head to AniRec</button>\n            </Link>\n        </Fragment>\n        \n    )\n}\n\nexport default SurveyOne;\n","/home/jason/AniRec/test/anirec/src/pages/landing_page/Wallpaper.js",["133"],"import React, { Fragment, useEffect } from \"react\";\nimport {useQuery, gql} from '@apollo/client'\nimport \"./Wallpaper.css\"\n\nexport default function Wallpaper(){\n    // query for wallpaper\n    const WALLPAPER = gql`\n    {\n        Page(page: 1, perPage: 48) {\n            media(sort: POPULARITY_DESC, isAdult: false, type: ANIME) {\n                coverImage{\n                    extraLarge\n                }\n                bannerImage\n            }\n        }\n    }\n    `;\n\n    const {error, loading, data} = useQuery(WALLPAPER);\n\n    useEffect(()=>{\n       }, [data]\n    );\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n    return(\n        <Fragment>\n            <div className=\"img-wrapper\">\n                {/* gray overlay */}\n                <div className=\"img-overlay\"></div>\n                {/* img under */}\n                <div className=\"img-box\">\n                    <img className=\"wallpaper-img\" src={data.Page.media[13].bannerImage}/>\n                </div>\n            </div>\n            \n        </Fragment>\n\n    );}\n}","/home/jason/AniRec/test/anirec/src/pages/content_pages/show_page.js",["134","135","136","137","138"],"import React, { Component, Fragment, useEffect } from \"react\";\nimport { Container, Row, Col, Button, ButtonGroup } from \"react-bootstrap\";\nimport TopSpace from \"../../components/global_elements/TopSpacer.js\";\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory, useParams  } from \"react-router-dom\";\nimport { AnimeInfo} from \"../../components/animepages.component.js\";\n\nimport {gql, useQuery} from '@apollo/client';\nimport \"./show_page.css\"\n\nexport default function AnimePage(props) {\n    // query for data \n    const params = useParams();\n    const ANIME_QUERY = gql`\n    query AnimeQuery($id: Int)\n    {\n        series: Media(type: ANIME, id: $id) {\n        id\n        title {\n          english\n          romaji\n        }\n        genres\n        description(asHtml: false)\n        coverImage {\n          medium\n          large\n          extraLarge\n        }\n        studios {\n          nodes {\n            name\n          }\n        }\n        episodes\n        season\n        seasonYear\n        averageScore\n        format\n      }\n    }\n    `\n\n    const {error, loading, data, refetch} = useQuery(ANIME_QUERY,\n        {\n            variables:{\n                id: params.animeId\n            }\n        });\n\n    useEffect(()=>{\n        refetch()\n    }, []\n    );\n\n    \n    if (loading) return <p>Loading1...</p>\n    if (error) return <p>Error1 :(</p>\n\n    // storing data \n    let animeData = {\n        name: (data.series.title.english==null)\n            ? data.series.title.romaji :\n            data.series.title.english,\n        image: data.series.coverImage.large,\n        genre: data.series.genres,\n        studio: data.series.studios,\n        description: data.series.description,\n        episodes: data.series.episodes,\n        season: data.series.season,\n        seasonYear: data.series.seasonYear,\n        rating: data.series.averageScore,\n        format: data.series.format\n    }\n\n    let genreCount = animeData.genre.length\n\n        return(\n            <Fragment>\n                <TopSpace/>\n                    <Container>\n                        {/* back btn */}\n                        <Row id=\"back-btn-space\">\n                            <Link to={`/Anime`}>\n                                <Button className=\"back_btn\"><strong>Home</strong></Button>\n                            </Link>\n                        </Row>\n                        <Row>\n                            <Col>                    \n                            {/* title         */}\n                            <Row>\n                                <p className=\"show-page-title\"><strong>{animeData.name}</strong></p>\n                            </Row>\n                            {/* genres */}\n                            <Row>\n                                <div className=\"show-page-genres\">\n                                    {animeData.genre.map((genres) =>\n                                        {\n                                            if (genreCount < 2)\n                                                return <Link key={genres} className=\"show-page-genre-links\" to={{\n                                                            pathname:`/GenresShowMore/${genres}/1`\n                                                        }}>{genres}</Link>\n                                            else \n                                                genreCount--;\n                                                return  <Fragment>\n                                                            <Link key={genres} className=\"show-page-genre-links\" to={{\n                                                                pathname:`/GenresShowMore/${genres}/1`\n                                                                }}>{genres}\n                                                            </Link>\n                                                            <a>, </a>\n                                                        </Fragment>\n                                            }\n                                    )}\n                                </div>\n                            </Row>\n                            </Col>\n\n                        </Row>\n                        <Router>\n                            <Row>\n                                {/* left side sections */}\n                                <Col id=\"show-page-left-side\">\n                                    <Row>\n                                        <div className=\"show-page-img\">\n                                            <img  src={animeData.image}/>\n                                        </div>\n                                    </Row>\n                                    <Row>\n                                        <div className=\"rating\">\n                                            <strong>\n                                                <p>Overall Rating</p>\n                                                <p>{animeData.rating} / 100</p>\n                                            </strong>\n                                        </div>\n                                        <ButtonGroup vertical id=\"show-page-button-group\">\n                                            <Link id=\"tab-name\" to={`/AnimePage/${params.animeId}/information`}>\n                                                <Button id=\"side-btns\">\n                                                    Information\n                                                </Button>\n                                            </Link>\n                                        </ButtonGroup>\n                                    </Row>\n                                </Col>\n                                <Col id=\"show-page-right-side-outer\">\n                                    <Row id=\"show-page-right-side-inner\">\n                                        <Switch>\n                                            {/* component routes for right side */}\n                                            <Route path=\"/AnimePage/:animeid/information\" component={() =>\n                                                <AnimeInfo \n                                                    name = {animeData.name} \n                                                    summary = {animeData.description} \n                                                    season = {animeData.season} \n                                                    seasonYear = {animeData.seasonYear}\n                                                    episodes = {animeData.episodes} \n                                                    studio = {animeData.studio}  \n                                                    format={animeData.format}/>}/>\n                                        </Switch>\n                                    </Row>\n                                </Col>\n                            </Row>  \n                        </Router>\n                    </Container>\n            </Fragment>\n        );\n}","/home/jason/AniRec/test/anirec/src/components/animepages.component.js",["139","140"],"import React, { Component, Fragment } from \"react\";\r\nimport {Row, Col} from \"react-bootstrap\";\r\nimport \"./animepages.component.css\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// main information\r\nexport function AnimeInfo(props){\r\n    // processing studio names\r\n    const studioArr = [];\r\n    props.studio.nodes.map((studios) =>(\r\n        studioArr.push(studios.name)\r\n    ))\r\n\r\n    console.log(props.format)\r\n\r\n        return (\r\n            <Fragment>\r\n                <Col>\r\n                    <Row id=\"info-block\">\r\n                        <div><strong>Summary:</strong> </div>\r\n                        <div>{props.summary}</div>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row id=\"info-block\">\r\n                        <div><strong>Season:</strong> {props.season} {props.seasonYear}</div>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row id=\"info-block\">\r\n                        <div><strong>Episodes:</strong> {props.episodes}</div>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row id=\"info-block\">\r\n                        <div><strong>Studios:&nbsp;</strong> </div>\r\n                        <div>{studioArr.join(', ')}</div>\r\n                    </Row>\r\n                    <br></br>\r\n                    <Row id=\"info-block\">\r\n                        <div><strong>Media Format:&nbsp;</strong> </div>\r\n                        <div>{props.format}</div>\r\n                    </Row>\r\n                </Col>\r\n            </Fragment>\r\n            \r\n        );\r\n}","/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js",["141","142","143"],"import React, {useEffect, setState} from \"react\";\nimport {useQuery, gql} from '@apollo/client';\n\nexport default function GetUserRecs(props){\n    const [recArr, setRecArr] = setState([]);\n    const axios = require('axios').default;\n    const promise = axios.get('http://localhost:5000');\n\n    useEffect(() => {\n        GetUserRecs().then((data) => {\n            for (var user in data){\n                if (data[user][\"fields\"][\"username\"] == props.username){\n                    var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n                    for (var i = 0; i < recArray.length; i++){\n                        recArray[i] = parseInt(recArray[i], 10);\n                    } \n                    setRecArr(recArray);\n                }\n            }\n        })\n        \n    }, []);\n    const returnRecArr = []\n\n    for (let i = 0; i < props.num; i++) {\n        returnRecArr.push(<RecQueryComponent arrayOfIDs={recArr} index={i}/>);\n    }\n    return returnRecArr;\n}\n\n\nconst RecQueryComponent = ({arrayOfIDs, index}) =>{\n\n    const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n    const RecArray = arrayOfIDs;\n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables:{\n                id: RecArray[index]\n            }\n        });\n\n    if (loading) return <p>Loading1...</p>\n    if (error) return <p>Error1 :(</p>\n    return data\n}","/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js",["144","145","146"],"import React, { Fragment, useEffect, setState  } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport {useQuery, gql} from '@apollo/client'\n\n\nexport default function GetShow(props) {\n    const REC_QUERY = gql`\n    query RecQuery($id: Int) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n    }`;\n    \n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables: {\n                id: props.id\n            }\n        })\n    \n    useEffect(()=>{\n        }, []\n    );\n\n    if (loading) return <p>Loading2...</p>\n    if (error) return <p>Error2 :(</p>\n\n    return data;\n}","/home/jason/AniRec/test/anirec/src/pages/listing_pages/UserSpecificShowMore.js",["147"],"import React, { Fragment, useEffect } from \"react\";\nimport \"./UserSpecificShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useLocation, useParams } from 'react-router-dom';\n \nexport default function UserShowMore(){\n    // query for data\n    const params = useParams();\n    const location = useLocation();\n    const arr = location.state.userRecShows;\n\n    const displayedShows = []\n    for (let i = 0; i < 48; i++) {\n        displayedShows.push(arr[i])\n    }\n\n    useEffect(()=>{\n       }, []\n    );\n\n    const rows = chunk(displayedShows, 4)\n    return (\n        <Fragment>\n            <TopSpace />\n            <Container className=\"\">\n                {/* back btn */}\n                <Row id=\"back_btn_space\">\n                    <Link className=\"back_btn\" to={\"/Anime\"}>\n                        <Button className=\"back_btn\" id=\"btn-right\"><strong>Home</strong></Button>\n                    </Link>\n                </Row>\n                <Grid id=\"grid\">\n                    {/* main grid content  */}\n                    {rows.map((cols) => (\n                        <Row>\n                            {cols.map((col) => (\n                                <Col md={3} id=\"grid-content\">\n                                    <ListingPageShowCard   \n                                        id={col.Page.media.id}\n                                        image={col.Page.media.coverImage.large} \n                                        name={(col.Page.media.title.english==null)\n                                            ? col.Page.media.title.romaji :\n                                            col.Page.media.title.english}\n                                        genre={col.Page.media.genres}\n                                        studio={(col.Page.media.studios.nodes.length > 5) ? col.Page.media.studios.nodes.slice(0,6).map(studio_name => \n                                            studio_name.name).join(', ') :\n                                            col.Page.media.studios.nodes.map(studio_name => \n                                            studio_name.name).join(', ')}/>\n                                </Col>\n                            )\n                            )}\n                        </Row>\n                    )\n                    )}\n                </Grid>\n            </Container>\n        </Fragment>\n    );\n}",{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":13,"column":8,"nodeType":"154","messageId":"155","endLine":13,"endColumn":14},{"ruleId":"156","severity":1,"message":"157","line":19,"column":53,"nodeType":"158","messageId":"159","endLine":19,"endColumn":55},{"ruleId":"152","severity":1,"message":"160","line":1,"column":27,"nodeType":"154","messageId":"155","endLine":1,"endColumn":36},{"ruleId":"152","severity":1,"message":"161","line":1,"column":38,"nodeType":"154","messageId":"155","endLine":1,"endColumn":46},{"ruleId":"152","severity":1,"message":"162","line":4,"column":21,"nodeType":"154","messageId":"155","endLine":4,"endColumn":29},{"ruleId":"152","severity":1,"message":"163","line":6,"column":8,"nodeType":"154","messageId":"155","endLine":6,"endColumn":19},{"ruleId":"152","severity":1,"message":"164","line":10,"column":19,"nodeType":"154","messageId":"155","endLine":10,"endColumn":22},{"ruleId":"152","severity":1,"message":"165","line":28,"column":11,"nodeType":"154","messageId":"155","endLine":28,"endColumn":27},{"ruleId":"166","severity":1,"message":"167","line":22,"column":33,"nodeType":"168","endLine":22,"endColumn":57},{"ruleId":"169","severity":1,"message":"170","line":60,"column":61,"nodeType":"168","endLine":60,"endColumn":64},{"ruleId":"171","severity":1,"message":"172","line":23,"column":56,"nodeType":"173","messageId":"174","endLine":23,"endColumn":58},{"ruleId":"171","severity":1,"message":"172","line":23,"column":110,"nodeType":"173","messageId":"174","endLine":23,"endColumn":112},{"ruleId":"166","severity":1,"message":"167","line":19,"column":21,"nodeType":"168","endLine":19,"endColumn":64},{"ruleId":"169","severity":1,"message":"170","line":45,"column":61,"nodeType":"168","endLine":45,"endColumn":64},{"ruleId":"152","severity":1,"message":"175","line":1,"column":38,"nodeType":"154","messageId":"155","endLine":1,"endColumn":46},{"ruleId":"152","severity":1,"message":"176","line":8,"column":27,"nodeType":"154","messageId":"155","endLine":8,"endColumn":37},{"ruleId":"177","severity":1,"message":"178","line":52,"column":11,"nodeType":"179","endLine":52,"endColumn":13,"suggestions":"180"},{"ruleId":"152","severity":1,"message":"164","line":9,"column":19,"nodeType":"154","messageId":"155","endLine":9,"endColumn":22},{"ruleId":"177","severity":1,"message":"178","line":26,"column":11,"nodeType":"179","endLine":26,"endColumn":13,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":9,"column":1,"nodeType":"184","messageId":"185","endLine":38,"endColumn":4},{"ruleId":"152","severity":1,"message":"186","line":155,"column":11,"nodeType":"154","messageId":"155","endLine":155,"endColumn":19},{"ruleId":"152","severity":1,"message":"187","line":157,"column":12,"nodeType":"154","messageId":"155","endLine":157,"endColumn":17},{"ruleId":"152","severity":1,"message":"188","line":158,"column":12,"nodeType":"154","messageId":"155","endLine":158,"endColumn":20},{"ruleId":"171","severity":1,"message":"172","line":177,"column":37,"nodeType":"173","messageId":"174","endLine":177,"endColumn":39},{"ruleId":"166","severity":1,"message":"167","line":36,"column":21,"nodeType":"168","endLine":36,"endColumn":91},{"ruleId":"152","severity":1,"message":"189","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"176","line":4,"column":56,"nodeType":"154","messageId":"155","endLine":4,"endColumn":66},{"ruleId":"177","severity":1,"message":"178","line":52,"column":8,"nodeType":"179","endLine":52,"endColumn":10,"suggestions":"190"},{"ruleId":"169","severity":1,"message":"170","line":109,"column":61,"nodeType":"168","endLine":109,"endColumn":64},{"ruleId":"166","severity":1,"message":"167","line":124,"column":45,"nodeType":"168","endLine":124,"endColumn":74},{"ruleId":"152","severity":1,"message":"189","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":26},{"ruleId":"152","severity":1,"message":"191","line":4,"column":10,"nodeType":"154","messageId":"155","endLine":4,"endColumn":14},{"ruleId":"152","severity":1,"message":"192","line":7,"column":11,"nodeType":"154","messageId":"155","endLine":7,"endColumn":18},{"ruleId":"171","severity":1,"message":"172","line":12,"column":54,"nodeType":"173","messageId":"174","endLine":12,"endColumn":56},{"ruleId":"177","severity":1,"message":"193","line":22,"column":8,"nodeType":"179","endLine":22,"endColumn":10,"suggestions":"194"},{"ruleId":"152","severity":1,"message":"195","line":1,"column":17,"nodeType":"154","messageId":"155","endLine":1,"endColumn":25},{"ruleId":"152","severity":1,"message":"161","line":1,"column":38,"nodeType":"154","messageId":"155","endLine":1,"endColumn":46},{"ruleId":"152","severity":1,"message":"196","line":2,"column":10,"nodeType":"154","messageId":"155","endLine":2,"endColumn":21},{"ruleId":"152","severity":1,"message":"197","line":12,"column":11,"nodeType":"154","messageId":"155","endLine":12,"endColumn":17},"no-native-reassign",["198"],"no-negated-in-lhs",["199"],"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useEffect' is defined but never used.","'setState' is defined but never used.","'TRY_THIS' is defined but never used.","'GetUserRecs' is defined but never used.","'gql' is defined but never used.","'tryShowToDisplay' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'useHistory' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'refetch'. Either include it or remove the dependency array.","ArrayExpression",["200"],["201"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'location' is assigned a value but never used.","'error' is assigned a value but never used.","'isLoaded' is assigned a value but never used.","'Component' is defined but never used.",["202"],"'Link' is defined but never used.","'promise' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.username' and 'setRecArr'. Either include them or remove the dependency array.",["203"],"'Fragment' is defined but never used.","'useLocation' is defined but never used.","'params' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"204","fix":"205"},{"desc":"204","fix":"206"},{"desc":"204","fix":"207"},{"desc":"208","fix":"209"},"Update the dependencies array to be: [refetch]",{"range":"210","text":"211"},{"range":"212","text":"211"},{"range":"213","text":"211"},"Update the dependencies array to be: [props.username, setRecArr]",{"range":"214","text":"215"},[1486,1488],"[refetch]",[843,845],[1263,1265],[799,801],"[props.username, setRecArr]"]