{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, setState } from \"react\";\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REC_QUERY = gql`\nquery RecQuery($id: id) {\n    Media(type: ANIME, id: $id){\n        id\n        title{\n            english\n            romaji\n        }\n        genres\n        description\n        coverImage{\n            medium\n            large\n            extraLarge\n        }\n        studios{\n            nodes{\n                name\n            }\n        }\n    }\n\n}`;\n\nconst GetShow = props => {\n  _s();\n\n  const id = props.showID;\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(REC_QUERY, {\n    variables: {\n      id: id\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading2...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error2 :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  console.log(data);\n  return data;\n};\n\n_s(GetShow, \"GiCbuNzsD6/Beq272EawZ+N+s04=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetShow;\nexport default GetShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetShow\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js"],"names":["React","Fragment","useEffect","setState","useQuery","gql","REC_QUERY","GetShow","props","id","showID","error","loading","data","variables","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAsD,OAAtD;AAEA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AAEA,MAAMC,SAAS,GAAGD,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAtBA;;AAwBA,MAAME,OAAO,GAAGC,KAAK,IAAI;AAAA;;AACrB,QAAMC,EAAE,GAAGD,KAAK,CAACE,MAAjB;AACA,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBT,QAAQ,CAACE,SAAD,EACnC;AACIQ,IAAAA,SAAS,EAAE;AACPL,MAAAA,EAAE,EAAEA;AADG;AADf,GADmC,CAAvC;AAOA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEXI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,SAAOA,IAAP;AACH,CAdD;;GAAMN,O;UAE6BH,Q;;;KAF7BG,O;AAgBN,eAAeA,OAAf","sourcesContent":["import React, { Fragment, useEffect, setState  } from \"react\";\n\nimport {useQuery, gql} from '@apollo/client'\n\nconst REC_QUERY = gql`\nquery RecQuery($id: id) {\n    Media(type: ANIME, id: $id){\n        id\n        title{\n            english\n            romaji\n        }\n        genres\n        description\n        coverImage{\n            medium\n            large\n            extraLarge\n        }\n        studios{\n            nodes{\n                name\n            }\n        }\n    }\n\n}`;\n\nconst GetShow = props => {\n    const id = props.showID\n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables: {\n                id: id\n            }\n        })\n\n    if (loading) return <p>Loading2...</p>\n    if (error) return <p>Error2 :(</p>\n\n    console.log(data);\n    return data;\n}\n\nexport default GetShow;"]},"metadata":{},"sourceType":"module"}