{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js\";\nimport React, { Component } from \"react\"; // I used axios for this but if you want to try using something else like ajax you're free to do so\n// Also axios is a separate module so don't forget to do 'npm install axios'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios').default; // An example of a GET request\n\n\naxios.get('http://localhost:5000').then(response => {\n  console.log(response.data);\n}); // How the login is going to work\n// Note: This isn't the most secure way to do this but since the crux of this project isn't in the security then it should be fine\n// We're going to set check whether a user is logged by making use of local storage,\n// on login, a key value with their username is going to be set, we're going to use that value to load their prefernces,\n// and once they log out we can delete what's inside local storage and return them to the main page\n\nfunction onLogin() {\n  axios.get('http://localhost:5000').then(response => {\n    let getRequest = response.data;\n    let username = document.getElementById(\"username\").value;\n    let password = document.getElementById(\"password\").value;\n\n    for (let user in getRequest) {\n      if (getRequest[user][\"fields\"][\"username\"] == username && getRequest[user][\"fields\"][\"password\"] == password) {\n        window.localStorage.setItem(\"username\", username); // Set the user's username in local storage\n        //Transition to next screen, however this is supposed to work in React\n      } else {\n        alert(\"No user found\");\n      }\n    }\n  });\n} // Compare what's in the username and password text fields with what's in the database via a GET request\n// If they match then we can set the key in local storage to the username of the logged in user and redirect them to the main page\n// We can then use what's in local storage to determine what user info we need to load e.g preferred genres\n//Probably don't need to set these CSRF tokens, but too lazy to remove to see what ungodly errors might appear\n\n\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\naxios.defaults.xsrfCookieName = 'csrftoken';\naxios.defaults.withCredentials = true; // Function registered to onCLick\n// Since this is the login page and not the register page, once the register page is done we can just copy this over\n// Implemented it here just for testing purposes\n\nfunction register() {\n  // All requests need to be sent in the FormData format\n  let bodyFormData = new FormData(); // Obtain the values from the textfields and append them to the FormData\n\n  let username = document.getElementById(\"username\").value;\n  let password = document.getElementById(\"password\").value;\n  bodyFormData.append(\"username\", username);\n  bodyFormData.append(\"password\", password); // Sends the POST request to the backend, requests dealing with setting username and password are sent to localhost:5000/users\n  // Sending POST requests to the normal localhost:5000 will not fulfil any requests\n\n  axios({\n    method: \"post\",\n    url: \"http://localhost:5000/users\",\n    data: bodyFormData,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(function (response) {\n    //handle success\n    console.log(response);\n  }).catch(function (response) {\n    //handle error\n    console.log(response);\n  });\n}\n\nexport default class Login extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"username\",\n          className: \"form-control\",\n          placeholder: \"Username\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"form-control\",\n          placeholder: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"custom-control custom-checkbox\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            className: \"custom-control-input\",\n            id: \"customCheck1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"custom-control-label\",\n            htmlFor: \"customCheck1\",\n            children: \"Remember me\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-dark btn-lg btn-block\",\n        onClick: register,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          id: \"reg_btn\",\n          href: \"/Anime\",\n          children: \" Sign in \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/landing_page/login.component.js"],"names":["React","Component","axios","require","default","get","then","response","console","log","data","onLogin","getRequest","username","document","getElementById","value","password","user","window","localStorage","setItem","alert","defaults","xsrfHeaderName","xsrfCookieName","withCredentials","register","bodyFormData","FormData","append","method","url","headers","catch","Login","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B,C,CAEA;;;AACAF,KAAK,CAACG,GAAN,CAAU,uBAAV,EAAmCC,IAAnC,CAAyCC,QAAD,IAAa;AAC7CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,QAAQ,CAACG,IAArB;AACP,CAFD,E,CAIA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,GAAkB;AACdT,EAAAA,KAAK,CAACG,GAAN,CAAU,uBAAV,EAAmCC,IAAnC,CAAyCC,QAAD,IAAa;AACjD,QAAIK,UAAU,GAAGL,QAAQ,CAACG,IAA1B;AACA,QAAIG,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACA,QAAIC,QAAQ,GAAGH,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;;AACA,SAAK,IAAIE,IAAT,IAAiBN,UAAjB,EAA4B;AACxB,UAAIA,UAAU,CAACM,IAAD,CAAV,CAAiB,QAAjB,EAA2B,UAA3B,KAA0CL,QAA1C,IAAsDD,UAAU,CAACM,IAAD,CAAV,CAAiB,QAAjB,EAA2B,UAA3B,KAA0CD,QAApG,EAA6G;AACzGE,QAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,UAA5B,EAAwCR,QAAxC,EADyG,CACtD;AACnD;AACH,OAHD,MAII;AACAS,QAAAA,KAAK,CAAC,eAAD,CAAL;AACH;AACJ;AACJ,GAbD;AAcH,C,CACD;AACA;AACA;AAGA;;;AACApB,KAAK,CAACqB,QAAN,CAAeC,cAAf,GAAgC,aAAhC;AACAtB,KAAK,CAACqB,QAAN,CAAeE,cAAf,GAAgC,WAAhC;AACAvB,KAAK,CAACqB,QAAN,CAAeG,eAAf,GAAiC,IAAjC,C,CAEA;AACA;AACA;;AACA,SAASC,QAAT,GAAmB;AACf;AACA,MAAIC,YAAY,GAAG,IAAIC,QAAJ,EAAnB,CAFe,CAGf;;AACA,MAAIhB,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACA,MAAIC,QAAQ,GAAGH,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACAY,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCjB,QAAhC;AACAe,EAAAA,YAAY,CAACE,MAAb,CAAoB,UAApB,EAAgCb,QAAhC,EAPe,CAQf;AACA;;AACAf,EAAAA,KAAK,CAAC;AACF6B,IAAAA,MAAM,EAAE,MADN;AAEFC,IAAAA,GAAG,EAAE,6BAFH;AAGFtB,IAAAA,IAAI,EAAEkB,YAHJ;AAIFK,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAJP,GAAD,CAAL,CAMK3B,IANL,CAMU,UAAUC,QAAV,EAAoB;AACxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GATL,EAUK2B,KAVL,CAUW,UAAU3B,QAAV,EAAoB;AACzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GAbL;AAcH;;AACD,eAAe,MAAM4B,KAAN,SAAoBlC,SAApB,CAA8B;AACzCmC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,cAAjC;AAAgD,UAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAII;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,cAAjC;AAAgD,UAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ,eAQI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,gCAAf;AAAA,kCACI;AAAO,YAAA,IAAI,EAAC,UAAZ;AAAuB,YAAA,SAAS,EAAC,sBAAjC;AAAwD,YAAA,EAAE,EAAC;AAA3D;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAO,YAAA,SAAS,EAAC,sBAAjB;AAAwC,YAAA,OAAO,EAAC,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cARJ,eAeI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,+BAAhC;AAAgE,QAAA,OAAO,EAAET,QAAzE;AAAA,+BACI;AAAG,UAAA,EAAE,EAAC,SAAN;AAAgB,UAAA,IAAI,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAqBH;;AAvBwC","sourcesContent":["import React, { Component } from \"react\";\r\n// I used axios for this but if you want to try using something else like ajax you're free to do so\r\n// Also axios is a separate module so don't forget to do 'npm install axios'\r\nconst axios = require('axios').default;\r\n\r\n// An example of a GET request\r\naxios.get('http://localhost:5000').then((response) =>{\r\n        console.log(response.data);\r\n});\r\n\r\n// How the login is going to work\r\n// Note: This isn't the most secure way to do this but since the crux of this project isn't in the security then it should be fine\r\n// We're going to set check whether a user is logged by making use of local storage,\r\n// on login, a key value with their username is going to be set, we're going to use that value to load their prefernces,\r\n// and once they log out we can delete what's inside local storage and return them to the main page\r\nfunction onLogin(){\r\n    axios.get('http://localhost:5000').then((response) =>{\r\n        let getRequest = response.data\r\n        let username = document.getElementById(\"username\").value;\r\n        let password = document.getElementById(\"password\").value;\r\n        for (let user in getRequest){\r\n            if (getRequest[user][\"fields\"][\"username\"] == username && getRequest[user][\"fields\"][\"password\"] == password){\r\n                window.localStorage.setItem(\"username\", username); // Set the user's username in local storage\r\n                //Transition to next screen, however this is supposed to work in React\r\n            }\r\n            else{\r\n                alert(\"No user found\")\r\n            }\r\n        }\r\n    });\r\n}\r\n// Compare what's in the username and password text fields with what's in the database via a GET request\r\n// If they match then we can set the key in local storage to the username of the logged in user and redirect them to the main page\r\n// We can then use what's in local storage to determine what user info we need to load e.g preferred genres\r\n\r\n\r\n//Probably don't need to set these CSRF tokens, but too lazy to remove to see what ungodly errors might appear\r\naxios.defaults.xsrfHeaderName = \"X-CSRFToken\";\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.withCredentials = true;\r\n\r\n// Function registered to onCLick\r\n// Since this is the login page and not the register page, once the register page is done we can just copy this over\r\n// Implemented it here just for testing purposes\r\nfunction register(){\r\n    // All requests need to be sent in the FormData format\r\n    let bodyFormData = new FormData();\r\n    // Obtain the values from the textfields and append them to the FormData\r\n    let username = document.getElementById(\"username\").value;\r\n    let password = document.getElementById(\"password\").value;\r\n    bodyFormData.append(\"username\", username);\r\n    bodyFormData.append(\"password\", password);\r\n    // Sends the POST request to the backend, requests dealing with setting username and password are sent to localhost:5000/users\r\n    // Sending POST requests to the normal localhost:5000 will not fulfil any requests\r\n    axios({\r\n        method: \"post\",\r\n        url: \"http://localhost:5000/users\",\r\n        data: bodyFormData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      })\r\n        .then(function (response) {\r\n          //handle success\r\n          console.log(response);\r\n        })\r\n        .catch(function (response) {\r\n          //handle error\r\n          console.log(response);\r\n        });\r\n}\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <input type=\"username\" className=\"form-control\" placeholder=\"Username\" />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Password\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n                    </div>\r\n                </div>\r\n\r\n                <button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\" onClick={register}>\r\n                    <a id=\"reg_btn\" href=\"/Anime\"> Sign in </a>\r\n                    </button>\r\n            </form>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}