{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/src/components/home_page/ShowCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from \"react\";\nimport \"./ShowCard.css\"; //frame for the anime to show\n\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { useQuery, gql } from '@apollo/client';\nimport { LOAD_ANIME } from '../../GraphQL/Queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ShowCard(props) {\n  _s();\n\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(LOAD_ANIME);\n  useEffect(() => {\n    console.log(data);\n  }, [data]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 23\n  }, this);\n  var imgLink = data.Media.coverImage.large;\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      id: \"card\",\n      children: /*#__PURE__*/_jsxDEV(Row, {\n        id: \"card_body\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          id: \"image\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${data.Media.coverImage.large}`,\n            class: \"center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 29\n          }, this), \"                        \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          id: \"description\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            id: \"title\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              id: \"text\",\n              children: `${data.Media.title.english}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            id: \"genres\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              id: \"text\",\n              children: props.genre\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            id: \"studio\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              id: \"text\",\n              children: props.studio\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Row, {\n            id: \"key_staff\",\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              id: \"text\",\n              children: props.key_staff\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ShowCard, \"abZnxjzkIEuksAhsSWrcZunJE1I=\", false, function () {\n  return [useQuery];\n});\n\n_c = ShowCard;\nexport default ShowCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowCard\");","map":{"version":3,"sources":["/home/jason/AniRec/test/src/components/home_page/ShowCard.js"],"names":["React","Fragment","Container","Row","Col","useQuery","gql","LOAD_ANIME","ShowCard","props","error","loading","data","useEffect","console","log","imgLink","Media","coverImage","large","title","english","genre","studio","key_staff"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,gBAAP,C,CACA;;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,QAAoC,iBAApC;AAEA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;AACA,SAAQC,UAAR,QAAyB,uBAAzB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AAEtB,QAAM;AAACC,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBP,QAAQ,CAACE,UAAD,CAAvC;AACAM,EAAAA,SAAS,CAAC,MAAI;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACD,GAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;AAIE,MAAID,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,MAAIM,OAAO,GAAGJ,IAAI,CAACK,KAAL,CAAWC,UAAX,CAAsBC,KAApC;AACA,sBACI,QAAC,QAAD;AAAA,2BACQ,QAAC,SAAD;AAAW,MAAA,EAAE,EAAC,MAAd;AAAA,6BACI,QAAC,GAAD;AAAK,QAAA,EAAE,EAAC,WAAR;AAAA,gCACI,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,OAAR;AAAA,kCACI;AAAK,YAAA,GAAG,EAAG,GAAEP,IAAI,CAACK,KAAL,CAAWC,UAAX,CAAsBC,KAAM,EAAzC;AAA4C,YAAA,KAAK,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI,QAAC,GAAD;AAAK,UAAA,EAAE,EAAC,aAAR;AAAA,kCACI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,OAAR;AAAA,mCACI;AAAG,cAAA,EAAE,EAAC,MAAN;AAAA,wBAAe,GAAEP,IAAI,CAACK,KAAL,CAAWG,KAAX,CAAiBC,OAAQ;AAA1C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,QAAR;AAAA,mCACI;AAAG,cAAA,EAAE,EAAC,MAAN;AAAA,wBAAcZ,KAAK,CAACa;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAOI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,QAAR;AAAA,mCACI;AAAG,cAAA,EAAE,EAAC,MAAN;AAAA,wBAAcb,KAAK,CAACc;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAPJ,eAUI,QAAC,GAAD;AAAK,YAAA,EAAE,EAAC,WAAR;AAAA,mCACI;AAAG,cAAA,EAAE,EAAC,MAAN;AAAA,wBAAcd,KAAK,CAACe;AAApB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBH;;GAlCQhB,Q;UAEwBH,Q;;;KAFxBG,Q;AAoCT,eAAeA,QAAf","sourcesContent":["import React, { Fragment } from \"react\";\r\nimport \"./ShowCard.css\";\r\n//frame for the anime to show\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport {useQuery, gql} from '@apollo/client'\r\nimport {LOAD_ANIME} from '../../GraphQL/Queries'\r\n\r\nfunction ShowCard(props){\r\n    \r\n  const {error, loading, data} = useQuery(LOAD_ANIME);\r\n  useEffect(()=>{\r\n    console.log(data)\r\n  }, [data]\r\n);\r\n    if (loading) return <p>Loading...</p>\r\n    if (error) return <p>Error :(</p>\r\n    var imgLink = data.Media.coverImage.large\r\n    return(\r\n        <Fragment>\r\n                <Container id=\"card\">\r\n                    <Row id=\"card_body\">\r\n                        <Col id=\"image\">\r\n                            <img src={`${data.Media.coverImage.large}`} class=\"center\"/>                        </Col>\r\n                        <Col id=\"description\">\r\n                            <Row id=\"title\">\r\n                                <p id=\"text\">{`${data.Media.title.english}`}</p>\r\n                            </Row>\r\n                            <Row id=\"genres\">\r\n                                <p id=\"text\">{props.genre}</p>\r\n                            </Row>\r\n                            <Row id=\"studio\">\r\n                                <p id=\"text\">{props.studio}</p>\r\n                            </Row>\r\n                            <Row id=\"key_staff\">\r\n                                <p id=\"text\">{props.key_staff}</p>\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default ShowCard;"]},"metadata":{},"sourceType":"module"}