{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, setState } from \"react\";\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetShow(props) {\n  _s();\n\n  const {\n    showID,\n    setShowID\n  } = setState(props.id);\n  const REC_QUERY = gql`\n    query RecQuery($id: Int) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(REC_QUERY, {\n    variables: {\n      id: showID\n    }\n  });\n  useEffect(() => {\n    setShowID(showID);\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading2...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error2 :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 23\n  }, this);\n  return data.Media;\n}\n\n_s(GetShow, \"abZnxjzkIEuksAhsSWrcZunJE1I=\", false, function () {\n  return [useQuery];\n});\n\n_c = GetShow;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetShow\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/home_page/GetRecShows.js"],"names":["React","Fragment","useEffect","setState","useQuery","gql","GetShow","props","showID","setShowID","id","REC_QUERY","error","loading","data","variables","Media"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAsD,OAAtD;AAEA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AAGA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACnC,QAAM;AAACC,IAAAA,MAAD;AAASC,IAAAA;AAAT,MAAsBN,QAAQ,CAACI,KAAK,CAACG,EAAP,CAApC;AACA,QAAMC,SAAS,GAAGN,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAtBI;AAwBA,QAAM;AAACO,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBC,IAAAA;AAAjB,MAAyBV,QAAQ,CAACO,SAAD,EACnC;AACII,IAAAA,SAAS,EAAE;AACPL,MAAAA,EAAE,EAAEF;AADG;AADf,GADmC,CAAvC;AAOAN,EAAAA,SAAS,CAAC,MAAI;AACVO,IAAAA,SAAS,CAACD,MAAD,CAAT;AACC,GAFI,EAEF,EAFE,CAAT;AAKA,MAAIK,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOE,IAAI,CAACE,KAAZ;AACH;;GA1CuBV,O;UA0BWF,Q;;;KA1BXE,O","sourcesContent":["import React, { Fragment, useEffect, setState  } from \"react\";\n\nimport {useQuery, gql} from '@apollo/client'\n\n\nexport default function GetShow(props) {\n    const {showID, setShowID} = setState(props.id)\n    const REC_QUERY = gql`\n    query RecQuery($id: Int) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n    \n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables: {\n                id: showID\n            }\n        })\n    \n    useEffect(()=>{\n        setShowID(showID);\n        }, []\n    );\n\n    if (loading) return <p>Loading2...</p>\n    if (error) return <p>Error2 :(</p>\n\n    return data.Media;\n}"]},"metadata":{},"sourceType":"module"}