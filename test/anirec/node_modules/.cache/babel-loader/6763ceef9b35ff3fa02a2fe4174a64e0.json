{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GetUserRecs(props) {\n  _s();\n\n  const [recArr, setRecArr] = setState([]);\n\n  const axios = require('axios').default;\n\n  const promise = axios.get('http://localhost:5000');\n  useEffect(() => {\n    GetUserRecs().then(data => {\n      for (var user in data) {\n        if (data[user][\"fields\"][\"username\"] == props.username) {\n          var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n\n          for (var i = 0; i < recArray.length; i++) {\n            recArray[i] = parseInt(recArray[i], 10);\n          }\n\n          setRecArr(recArray);\n        }\n      }\n    });\n  }, []);\n  const returnRecArr = [];\n\n  for (let i = 0; i < props.num; i++) {\n    returnRecArr.push( /*#__PURE__*/_jsxDEV(RecQueryComponent, {\n      arrayOfIDs: recArr,\n      index: i\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 27\n    }, this));\n  }\n\n  return dataPromise;\n}\n\n_s(GetUserRecs, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = GetUserRecs;\n\nconst RecQueryComponent = ({\n  arrayOfIDs,\n  index\n}) => {\n  _s2();\n\n  const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n  const RecArray = arrayOfIDs;\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(REC_QUERY, {\n    variables: {\n      id: RecArray[index]\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading1...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error1 :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 23\n  }, this);\n  return data;\n};\n\n_s2(RecQueryComponent, \"GiCbuNzsD6/Beq272EawZ+N+s04=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = RecQueryComponent;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GetUserRecs\");\n$RefreshReg$(_c2, \"RecQueryComponent\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js"],"names":["React","useEffect","useState","useQuery","gql","GetUserRecs","props","recArr","setRecArr","setState","axios","require","default","promise","get","then","data","user","username","recArray","match","i","length","parseInt","returnRecArr","num","push","dataPromise","RecQueryComponent","arrayOfIDs","index","REC_QUERY","RecArray","error","loading","variables","id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AAEA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA2B;AAAA;;AACtC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBC,QAAQ,CAAC,EAAD,CAApC;;AACA,QAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAP,CAAiBC,OAA/B;;AACA,QAAMC,OAAO,GAAGH,KAAK,CAACI,GAAN,CAAU,uBAAV,CAAhB;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,WAAW,GAAGU,IAAd,CAAoBC,IAAD,IAAU;AACzB,WAAK,IAAIC,IAAT,IAAiBD,IAAjB,EAAsB;AAClB,YAAIA,IAAI,CAACC,IAAD,CAAJ,CAAW,QAAX,EAAqB,UAArB,KAAoCX,KAAK,CAACY,QAA9C,EAAuD;AACnD,cAAIC,QAAQ,GAAGH,IAAI,CAACC,IAAD,CAAJ,CAAW,QAAX,EAAqB,iBAArB,EAAwCG,KAAxC,CAA8C,MAA9C,CAAf;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACrCF,YAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcE,QAAQ,CAACJ,QAAQ,CAACE,CAAD,CAAT,EAAc,EAAd,CAAtB;AACH;;AACDb,UAAAA,SAAS,CAACW,QAAD,CAAT;AACH;AACJ;AACJ,KAVD;AAYH,GAbQ,EAaN,EAbM,CAAT;AAcA,QAAMK,YAAY,GAAG,EAArB;;AAEA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGf,KAAK,CAACmB,GAA1B,EAA+BJ,CAAC,EAAhC,EAAoC;AAChCG,IAAAA,YAAY,CAACE,IAAb,eAAkB,QAAC,iBAAD;AAAmB,MAAA,UAAU,EAAEnB,MAA/B;AAAuC,MAAA,KAAK,EAAEc;AAA9C;AAAA;AAAA;AAAA;AAAA,YAAlB;AACH;;AACD,SAAOM,WAAP;AACH;;GAzBuBtB,W;;KAAAA,W;;AA4BxB,MAAMuB,iBAAiB,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAwB;AAAA;;AAE9C,QAAMC,SAAS,GAAG3B,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAtBI;AAuBA,QAAM4B,QAAQ,GAAGH,UAAjB;AACA,QAAM;AAACI,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBlB,IAAAA;AAAjB,MAAyBb,QAAQ,CAAC4B,SAAD,EACnC;AACII,IAAAA,SAAS,EAAC;AACNC,MAAAA,EAAE,EAAEJ,QAAQ,CAACF,KAAD;AADN;AADd,GADmC,CAAvC;AAOA,MAAII,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,SAAOjB,IAAP;AACH,CApCD;;IAAMY,iB;UA0B6BzB,Q;;;MA1B7ByB,iB","sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport {useQuery, gql} from '@apollo/client';\n\nexport default function GetUserRecs(props){\n    const [recArr, setRecArr] = setState([]);\n    const axios = require('axios').default;\n    const promise = axios.get('http://localhost:5000');\n\n    useEffect(() => {\n        GetUserRecs().then((data) => {\n            for (var user in data){\n                if (data[user][\"fields\"][\"username\"] == props.username){\n                    var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n                    for (var i = 0; i < recArray.length; i++){\n                        recArray[i] = parseInt(recArray[i], 10);\n                    } \n                    setRecArr(recArray);\n                }\n            }\n        })\n        \n    }, []);\n    const returnRecArr = []\n\n    for (let i = 0; i < props.num; i++) {\n        returnRecArr.push(<RecQueryComponent arrayOfIDs={recArr} index={i}/>);\n    }\n    return dataPromise;\n}\n\n\nconst RecQueryComponent = ({arrayOfIDs, index}) =>{\n    \n    const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }\n\n    }`;\n    const RecArray = arrayOfIDs;\n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables:{\n                id: RecArray[index]\n            }\n        });\n\n    if (loading) return <p>Loading1...</p>\n    if (error) return <p>Error1 :(</p>\n    return data\n}"]},"metadata":{},"sourceType":"module"}