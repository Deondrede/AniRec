{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/SurveyOne.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, Fragment } from 'react';\nimport MySurvey from './SurveyType';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n{\n  /*\n     Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n     This file holds the survey logic.\n     what it currently does:\n      - allows the users to take the survey\n      - all needed answers are gathered\n      - sends the data to the backend (lines 70 - 97)\n  */\n} //does the logic\n//call MySurvey from surveyType.js\n//gets called by App\n//survey heirarchy: questions --> surveyType --> surveyOne\n//to get the genre response = response.GENRE.ANSWER.Anime[index 0-2]\n\nconst SurveyOne = () => {\n  _s();\n\n  const [showPage, setShowPage] = useState(true); //function takes the data from the user and sends it to the backend.\n  // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n\n  const onCompletePage = useCallback(data => {\n    //console.log(\"This is from the surveyOne2.js file \",data);\n    setShowPage(!showPage);\n    let response = data; // to play around with the data\n\n    let titles = []; //store all the wanted titles from the survey \n\n    let username = response.Username; //console.log(username);\n    //get list of all prefered genres\n\n    let desired_genres = response.prefered_genres; //go through all the desired genres\n\n    for (var x = 0; x < desired_genres.length; x++) {\n      let selected_genre = desired_genres[x]; //console.log(response[selected_genre][\"Yes\"]);\n      //yes answers\n\n      if (response[selected_genre][\"Yes\"] != null) {\n        //get the yes titles\n        let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"]; //console.log(yes_titles);\n\n        for (var y = 0; y < yes_titles.length; y++) {\n          //console.log(\"yes\",yes_titles[y]);\n          //add the yes_titles to titles\n          titles.push(yes_titles[y]);\n        }\n      } //maybe answers\n\n\n      if (response[selected_genre][\"Maybe\"] != null) {\n        //get the maybe titles\n        let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"]; //console.log(maybe_titles);\n\n        for (var m = 0; m < maybe_titles.length; m++) {\n          //console.log(\"maybe\",maybe_titles[m]);\n          //add the maybe_titles to titles\n          titles.push(maybe_titles[m]);\n        }\n      }\n    } //console.log(titles.length);\n    //after all the data is gathered, send it to the backend.\n    //sending genres to the backend\n\n\n    for (var g = 0; g < desired_genres.legnth; g++) {\n      let user_genre = desired_genres[g];\n      let bodyFormData = new FormData();\n      bodyFormData.append(\"username\", username);\n      bodyFormData.append(\"genre\", user_genre);\n      console.log(bodyFormData);\n      axios({\n        method: \"post\",\n        url: \"http:localhost:5000/genre\",\n        data: bodyFormData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n    } //sending titles to the backend\n\n\n    for (var t = 0; t < titles.length; t++) {\n      let user_anime = titles[t];\n      let bodyFormData = new FormData();\n      bodyFormData.append(\"username\", username);\n      bodyFormData.append(\"anime\", user_anime);\n      console.log(bodyFormData);\n      axios({\n        method: \"post\",\n        url: \"http:localhost:5000/anime\",\n        data: bodyFormData,\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n    }\n  }, [showPage]); //can customize the thank you page for what we want. not mandatory.\n\n  const setFinalPage = () => {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Thank you for taking the survey. Please wait while we build your recommendations.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MySurvey, {\n      showCompletedPage: data => onCompletePage(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/Anime\",\n        children: \"Head to AniRec\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SurveyOne, \"7rg6rrqyxVvLOn0oTKj3Zv8NMN0=\");\n\n_c = SurveyOne;\nexport default SurveyOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyOne\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/SurveyOne.js"],"names":["React","useState","useCallback","Fragment","MySurvey","axios","SurveyOne","showPage","setShowPage","onCompletePage","data","response","titles","username","Username","desired_genres","prefered_genres","x","length","selected_genre","yes_titles","y","push","maybe_titles","m","g","legnth","user_genre","bodyFormData","FormData","append","console","log","method","url","headers","t","user_anime","setFinalPage"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, Fragment} from 'react';\nimport MySurvey from './SurveyType';\nimport axios from 'axios';\n\n{/*\n    Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n    This file holds the survey logic.\n    what it currently does:\n     - allows the users to take the survey\n     - all needed answers are gathered\n     - sends the data to the backend (lines 70 - 97)\n*/}\n\n\n//does the logic\n//call MySurvey from surveyType.js\n//gets called by App\n//survey heirarchy: questions --> surveyType --> surveyOne\n\n//to get the genre response = response.GENRE.ANSWER.Anime[index 0-2]\n\nconst SurveyOne = () => {\n\n    const [showPage, setShowPage] = useState(true);\n\n    //function takes the data from the user and sends it to the backend.\n    // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n    const onCompletePage = useCallback((data)=> {\n        //console.log(\"This is from the surveyOne2.js file \",data);\n        setShowPage(!showPage);\n\n        let response = data; // to play around with the data\n        let titles = []; //store all the wanted titles from the survey \n        let username = response.Username;\n        //console.log(username);\n        //get list of all prefered genres\n        let desired_genres = response.prefered_genres;\n\n        //go through all the desired genres\n        for (var x = 0; x < desired_genres.length; x++) {\n            let selected_genre = desired_genres[x];\n\n            //console.log(response[selected_genre][\"Yes\"]);\n            //yes answers\n            if (response[selected_genre][\"Yes\"] != null){\n                //get the yes titles\n                let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"];\n                //console.log(yes_titles);\n                for (var y = 0; y < yes_titles.length; y++){\n                    //console.log(\"yes\",yes_titles[y]);\n                    //add the yes_titles to titles\n                    titles.push(yes_titles[y]);\n                }\n            }\n\n            //maybe answers\n            if(response[selected_genre][\"Maybe\"] != null){\n                //get the maybe titles\n                let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"];\n                //console.log(maybe_titles);\n                for( var m = 0; m < maybe_titles.length; m++){\n                    //console.log(\"maybe\",maybe_titles[m]);\n                    //add the maybe_titles to titles\n                    titles.push(maybe_titles[m]);\n                }\n            }\n        }\n        //console.log(titles.length);\n\n        //after all the data is gathered, send it to the backend.\n        //sending genres to the backend\n        for (var g = 0; g < desired_genres.legnth; g++) {\n            let user_genre = desired_genres[g];\n            let bodyFormData = new FormData();\n            bodyFormData.append(\"username\", username);\n            bodyFormData.append(\"genre\", user_genre);\n            console.log(bodyFormData);\n            axios({\n                method: \"post\",\n                url: \"http:localhost:5000/genre\",\n                data: bodyFormData,\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n            })\n        }\n\n        //sending titles to the backend\n        for (var t = 0; t<titles.length; t++ ){\n            let user_anime = titles[t];\n            let bodyFormData = new FormData();\n            bodyFormData.append(\"username\", username);\n            bodyFormData.append(\"anime\", user_anime);\n            console.log(bodyFormData);\n            axios({\n                method: \"post\",\n                url: \"http:localhost:5000/anime\",\n                data: bodyFormData,\n                headers: { \"Content-Type\": \"multipart/form-data\" },\n            })\n        }\n        \n    }, [showPage])\n\n    //can customize the thank you page for what we want. not mandatory.\n    const setFinalPage = () => {\n        return(\n            <main>\n                <h1>Thank you for taking the survey. Please wait while we build your recommendations.</h1>\n            </main>\n        )\n    }\n\n    return(\n        <Fragment>\n            <MySurvey showCompletedPage={data=>onCompletePage(data)} />\n            <button><a href=\"/Anime\">Head to AniRec</a></button>\n        </Fragment>\n        \n    )\n}\n\nexport default SurveyOne;\n"]},"metadata":{},"sourceType":"module"}