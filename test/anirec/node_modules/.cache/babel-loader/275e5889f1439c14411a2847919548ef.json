{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction register() {\n  // All requests need to be sent in the FormData format\n  let bodyFormData = new FormData(); // Obtain the values from the textfields and append them to the FormData\n\n  let username = document.getElementById(\"username\").value;\n  let password = document.getElementById(\"password\").value;\n  bodyFormData.append(\"username\", username);\n  bodyFormData.append(\"password\", password); // Sends the POST request to the backend, requests dealing with setting username and password are sent to localhost:5000/users\n  // Sending POST requests to the normal localhost:5000 will not fulfil any requests\n\n  axios({\n    method: \"post\",\n    url: \"http://localhost:5000/users\",\n    data: bodyFormData,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(function (response) {\n    //handle success\n    console.log(response);\n  }).catch(function (response) {\n    //handle error\n    console.log(response);\n  });\n}\n\nexport default class SignUp extends Component {\n  /*constructor(props){\r\n       super(props);\r\n         this.state = {\r\n           fields: {},\r\n           errors: {}\r\n       }\r\n   }\r\n     handleValidation(){\r\n       let fields = this.state.fields;\r\n       let errors = {};\r\n       let formIsValid = true;\r\n         // email\r\n       if (!fields[\"email\"]){\r\n           formIsValid = false;\r\n           errors[\"email\"] = \"Required\"\r\n       }\r\n         if (typeof fields[\"email\"] !== \"undefined\"){\r\n           let atPos = fields[\"email\"].lastIndexOf('@');\r\n           let dotPos = fields[\"email\"].lastIndexOf('.');\r\n             if (!(atPos < dotPos && atPos > 0 && fields[\"email\"].indexOf('@@') == -1 && dotPos > 2 &&fields[\"email\"].length - dotPos > 2)){\r\n               formIsValid = false;\r\n               errors[\"email\"] = \"Not a Valid Email\"\r\n           }\r\n       }\r\n         // username\r\n       if (!fields[\"name\"]){\r\n           formIsValid = false;\r\n           errors[\"name\"] = \"Required\"\r\n       }\r\n         if (typeof fields[\"name\"] !== \"undefined\"){\r\n           if (!fields[\"name\"].match(/^[a-zA-Z0-9]+$/)){\r\n               formIsValid = false;\r\n               errors[\"name\"] = \"Invalid Username\"\r\n           }\r\n       }\r\n         if (!fields[\"password\"]){\r\n           formIsValid = false;\r\n           errors[\"password\"] = \"Required\"\r\n       }\r\n         if (typeof fields[\"password\"] !== \"undefined\"){\r\n           if (!fields[\"name\"].match(/^[a-zA-Z0-9]+$/)){\r\n               formIsValid = false;\r\n               errors[\"name\"] = \"Invalid Characters Found\"\r\n           }\r\n       }\r\n         // password\r\n       this.setState({errors: errors});\r\n       return formIsValid;\r\n   }*/\n  //<button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Register</button>\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          placeholder: \"Username *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          className: \"form-control\",\n          placeholder: \"Email *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          className: \"form-control\",\n          placeholder: \"Password *\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-dark btn-lg btn-block\",\n        onClick: register,\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          id: \"reg_btn\",\n          href: \"/Survey\",\n          children: \" Register \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/landing_page/signup.component.js"],"names":["React","Component","register","bodyFormData","FormData","username","document","getElementById","value","password","append","axios","method","url","data","headers","then","response","console","log","catch","SignUp","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,QAAT,GAAmB;AACf;AACA,MAAIC,YAAY,GAAG,IAAIC,QAAJ,EAAnB,CAFe,CAGf;;AACA,MAAIC,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACA,MAAIC,QAAQ,GAAGH,QAAQ,CAACC,cAAT,CAAwB,UAAxB,EAAoCC,KAAnD;AACAL,EAAAA,YAAY,CAACO,MAAb,CAAoB,UAApB,EAAgCL,QAAhC;AACAF,EAAAA,YAAY,CAACO,MAAb,CAAoB,UAApB,EAAgCD,QAAhC,EAPe,CAQf;AACA;;AACAE,EAAAA,KAAK,CAAC;AACFC,IAAAA,MAAM,EAAE,MADN;AAEFC,IAAAA,GAAG,EAAE,6BAFH;AAGFC,IAAAA,IAAI,EAAEX,YAHJ;AAIFY,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAJP,GAAD,CAAL,CAMKC,IANL,CAMU,UAAUC,QAAV,EAAoB;AACxB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GATL,EAUKG,KAVL,CAUW,UAAUH,QAAV,EAAoB;AACzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACD,GAbL;AAcH;;AAED,eAAe,MAAMI,MAAN,SAAqBpB,SAArB,CAA+B;AAC3C;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYI;AAGAqB,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,SAAS,EAAC,cAA7B;AAA4C,UAAA,WAAW,EAAC;AAAxD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,OAAZ;AAAoB,UAAA,SAAS,EAAC,cAA9B;AAA6C,UAAA,WAAW,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cALJ,eASI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA,+BACI;AAAO,UAAA,IAAI,EAAC,UAAZ;AAAuB,UAAA,SAAS,EAAC,cAAjC;AAAgD,UAAA,WAAW,EAAC;AAA5D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ,eAaI;AAAQ,QAAA,SAAS,EAAC,+BAAlB;AAAkD,QAAA,OAAO,EAAEpB,QAA3D;AAAA,+BACQ;AAAG,UAAA,EAAE,EAAC,SAAN;AAAgB,UAAA,IAAI,EAAC,SAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADR;AAAA;AAAA;AAAA;AAAA,cAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmBH;;AApFyC","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nfunction register(){\r\n    // All requests need to be sent in the FormData format\r\n    let bodyFormData = new FormData();\r\n    // Obtain the values from the textfields and append them to the FormData\r\n    let username = document.getElementById(\"username\").value;\r\n    let password = document.getElementById(\"password\").value;\r\n    bodyFormData.append(\"username\", username);\r\n    bodyFormData.append(\"password\", password);\r\n    // Sends the POST request to the backend, requests dealing with setting username and password are sent to localhost:5000/users\r\n    // Sending POST requests to the normal localhost:5000 will not fulfil any requests\r\n    axios({\r\n        method: \"post\",\r\n        url: \"http://localhost:5000/users\",\r\n        data: bodyFormData,\r\n        headers: { \"Content-Type\": \"multipart/form-data\" },\r\n      })\r\n        .then(function (response) {\r\n          //handle success\r\n          console.log(response);\r\n        })\r\n        .catch(function (response) {\r\n          //handle error\r\n          console.log(response);\r\n        });\r\n}\r\n\r\nexport default class SignUp extends Component {\r\n   /*constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            fields: {},\r\n            errors: {}\r\n        }\r\n    }\r\n\r\n    handleValidation(){\r\n        let fields = this.state.fields;\r\n        let errors = {};\r\n        let formIsValid = true;\r\n\r\n        // email\r\n        if (!fields[\"email\"]){\r\n            formIsValid = false;\r\n            errors[\"email\"] = \"Required\"\r\n        }\r\n\r\n        if (typeof fields[\"email\"] !== \"undefined\"){\r\n            let atPos = fields[\"email\"].lastIndexOf('@');\r\n            let dotPos = fields[\"email\"].lastIndexOf('.');\r\n\r\n            if (!(atPos < dotPos && atPos > 0 && fields[\"email\"].indexOf('@@') == -1 && dotPos > 2 &&fields[\"email\"].length - dotPos > 2)){\r\n                formIsValid = false;\r\n                errors[\"email\"] = \"Not a Valid Email\"\r\n            }\r\n        }\r\n\r\n        // username\r\n        if (!fields[\"name\"]){\r\n            formIsValid = false;\r\n            errors[\"name\"] = \"Required\"\r\n        }\r\n\r\n        if (typeof fields[\"name\"] !== \"undefined\"){\r\n            if (!fields[\"name\"].match(/^[a-zA-Z0-9]+$/)){\r\n                formIsValid = false;\r\n                errors[\"name\"] = \"Invalid Username\"\r\n            }\r\n        }\r\n\r\n        if (!fields[\"password\"]){\r\n            formIsValid = false;\r\n            errors[\"password\"] = \"Required\"\r\n        }\r\n\r\n        if (typeof fields[\"password\"] !== \"undefined\"){\r\n            if (!fields[\"name\"].match(/^[a-zA-Z0-9]+$/)){\r\n                formIsValid = false;\r\n                errors[\"name\"] = \"Invalid Characters Found\"\r\n            }\r\n        }\r\n\r\n        // password\r\n        this.setState({errors: errors});\r\n        return formIsValid;\r\n    }*/\r\n\r\n    //<button type=\"submit\" className=\"btn btn-dark btn-lg btn-block\">Register</button>\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form>\r\n                <div className=\"form-group\">\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\"Username *\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"email\" className=\"form-control\" placeholder=\"Email *\" />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\" className=\"form-control\" placeholder=\"Password *\" />\r\n                </div>\r\n\r\n                <button className=\"btn btn-dark btn-lg btn-block\" onClick={register}>\r\n                        <a id=\"reg_btn\" href=\"/Survey\"> Register </a>\r\n                    </button>\r\n            </form>\r\n        );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}