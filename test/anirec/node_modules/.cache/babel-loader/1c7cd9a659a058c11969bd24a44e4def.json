{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback, Fragment, useEffect } from 'react';\nimport MySurvey from './surveyType';\nimport { Link, useLocation } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst axios = require('axios').default;\n\nlet nametotake = \"\";\nlet user_recs = [];\n{\n  /*\n     Author: Caitlin-Dawn Sangcap\n     Spring 2021. CSCI 499 - Capstone Project: AniRec\n      Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n     Survey heirarchy: questions --> surveyType --> surveyOne\n     This file holds the survey logic.\n      what it currently does:\n      - allows the users to take the survey\n      - all needed answers are gathered\n      - send the survey responses to the backend\n      - send the username to the Homepage\n      \n     Issues:\n         problem titles (DON'T CLICK ON):\n          - Action --> Hunter x Hunter\n          - Adventure --> Sword Art Online (gets error ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all())\n          Commented out portions:\n          - commented out the setFinalPage() due to time constraints\n            - was originally meant to display custom Thank you page.\n         \n         Backend related:\n          - once the watched_anime field in the backend reaches or gets close to 50 charcters,\n            the backend will start sending 500 errors\n            EXAMPLE ERROR:\n                 django.db.utils.DataError: value too long for type character varying(50)\n  */\n} //function to send all the data to the backend\n// copied from Deondre's work\n\nfunction register(formData1) {\n  axios({\n    method: \"post\",\n    url: \"http://localhost:5000/anime\",\n    data: formData1,\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    }\n  }).then(function (response) {\n    //handle success\n    console.log(response);\n  }).catch(function (response) {\n    //handle error\n    console.log(response);\n  }); //console.log(\"sent request\");\n}\n\nconst SurveyOne = () => {\n  _s();\n\n  const [showPage, setShowPage] = useState(true); //function takes the data from the user and sends it to the backend.\n  // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n\n  const onCompletePage = useCallback(data => {\n    //console.log(\"This is from the surveyOne2.js file \",data);\n    setShowPage(!showPage);\n    let response = data; // to play around with the data\n\n    console.log(data);\n    let titles = []; //store all the wanted titles from the survey \n\n    let send_data = []; //store all the FormData to be sent\n\n    let char_count = 0; //keep track of the amount of characters in titles to avoid errors\n\n    let username = response.Username;\n    nametotake = username; //console.log(username);\n    //get list of all prefered genres\n\n    let desired_genres = response.prefered_genres; //go through all the desired genres\n\n    for (var x = 0; x < desired_genres.length; x++) {\n      let selected_genre = desired_genres[x]; //console.log(response[selected_genre][\"Yes\"]);\n      //yes answers\n\n      if (response[selected_genre][\"Yes\"] != null) {\n        //get the yes titles\n        let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"]; //console.log(yes_titles);\n\n        for (var y = 0; y < yes_titles.length; y++) {\n          //console.log(\"yes\",yes_titles[y]);\n          //add the yes_titles to titles\n          if (titles.includes(yes_titles[y]) === false) {\n            //console.log(\"yes\",yes_titles[y]);\n            titles.push(yes_titles[y]);\n          }\n        }\n      } //maybe answers\n\n\n      if (response[selected_genre][\"Maybe\"] != null) {\n        //get the maybe titles\n        let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"]; //console.log(maybe_titles);\n\n        for (var m = 0; m < maybe_titles.length; m++) {\n          //console.log(\"maybe\",maybe_titles[m]);\n          //add the maybe_titles to titles\n          if (titles.includes(maybe_titles[m]) === false) {\n            //console.log(\"maybe\",maybe_titles[m]);\n            titles.push(maybe_titles[m]);\n          }\n        }\n      }\n    } //console.log(titles.length);\n    //making the different formData to be send to the backend\n\n\n    for (var a = 0; a < titles.length; a++) {\n      if (char_count <= 50) {\n        char_count = char_count + titles[a].length + 2;\n        let bodyFormData = new FormData();\n        bodyFormData.append(\"username\", username);\n        bodyFormData.append(\"anime\", titles[a]);\n        send_data.push(bodyFormData);\n      }\n    } //console.log(send_data.length);\n    //sending the data to the backend\n\n\n    send_data.forEach(element => {\n      register(element);\n    });\n  }, [showPage]); //can customize the thank you page for what we want. not mandatory.\n  // removed from use due to time constraints\n\n  /*const setFinalPage = () => {\n      return(\n          <main>\n              <h1>Thank you for taking the survey. Please wait while we build your recommendations.</h1>\n          </main>\n      )\n  }*/\n\n  const location = useLocation();\n  let recArray = [];\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [users, setItems] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:5000\").then(res => res.json()).then(result => {\n      setIsLoaded(true);\n      setItems(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n  users.forEach(element => {\n    if (element.fields.username == nametotake) {\n      console.log(element.fields.username);\n      recArray = element.fields.recommendations.match(/\\d+/g);\n\n      for (var i = 0; i < recArray.length; i++) {\n        recArray[i] = parseInt(recArray[i], 10);\n      }\n    }\n  }); //console.log(\"recArray\",recArray);\n\n  user_recs = recArray;\n  console.log(user_recs);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MySurvey, {\n      showCompletedPage: data => onCompletePage(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: {\n        pathname: \"/Anime\",\n        state: {\n          user: nametotake,\n          recs: recShowIDs\n        }\n      },\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Head to AniRec\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SurveyOne, \"Yg3jqWJaOCOvxH3FQitPZ3nEBgE=\", false, function () {\n  return [useLocation];\n});\n\n_c = SurveyOne;\nexport default SurveyOne;\n\nvar _c;\n\n$RefreshReg$(_c, \"SurveyOne\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/landing_page/survey_page/surveyOne.js"],"names":["React","useState","useCallback","Fragment","useEffect","MySurvey","Link","useLocation","axios","require","default","nametotake","user_recs","register","formData1","method","url","data","headers","then","response","console","log","catch","SurveyOne","showPage","setShowPage","onCompletePage","titles","send_data","char_count","username","Username","desired_genres","prefered_genres","x","length","selected_genre","yes_titles","y","includes","push","maybe_titles","m","a","bodyFormData","FormData","append","forEach","element","location","recArray","error","setError","isLoaded","setIsLoaded","users","setItems","fetch","res","json","result","fields","recommendations","match","i","parseInt","pathname","state","user","recs","recShowIDs"],"mappings":"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","sourcesContent":["import React, {useState, useCallback, Fragment, useEffect} from 'react';\nimport MySurvey from './surveyType';\nimport {Link, useLocation} from \"react-router-dom\";\nconst axios = require('axios').default;\n\nlet nametotake = \"\";\nlet user_recs= [];\n\n{/*\n    Author: Caitlin-Dawn Sangcap\n    Spring 2021. CSCI 499 - Capstone Project: AniRec\n\n    Created this following this YouTube tutorial: https://www.youtube.com/watch?v=NW0GwiHmNik\n    Survey heirarchy: questions --> surveyType --> surveyOne\n    This file holds the survey logic.\n\n    what it currently does:\n     - allows the users to take the survey\n     - all needed answers are gathered\n     - send the survey responses to the backend\n     - send the username to the Homepage\n     \n    Issues:\n        problem titles (DON'T CLICK ON):\n         - Action --> Hunter x Hunter\n         - Adventure --> Sword Art Online (gets error ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all())\n\n        Commented out portions:\n         - commented out the setFinalPage() due to time constraints\n           - was originally meant to display custom Thank you page.\n        \n        Backend related:\n         - once the watched_anime field in the backend reaches or gets close to 50 charcters,\n           the backend will start sending 500 errors\n           EXAMPLE ERROR:\n                django.db.utils.DataError: value too long for type character varying(50)\n\n*/}\n\n\n\n//function to send all the data to the backend\n// copied from Deondre's work\nfunction register(formData1){\n    axios({\n        method: \"post\",\n        url: \"http://localhost:5000/anime\",\n        data: formData1,\n        headers: { \"Content-Type\": \"multipart/form-data\" },\n      })\n        .then(function (response) {\n          //handle success\n          console.log(response);\n        })\n        .catch(function (response) {\n          //handle error\n          console.log(response);\n        });\n        //console.log(\"sent request\");\n    }\n\n\n\nconst SurveyOne = () => {\n\n    \n\n    const [showPage, setShowPage] = useState(true);\n\n    //function takes the data from the user and sends it to the backend.\n    // NOTE: This is survey specific. ONLY WORKS WITH THE SURVEY PROVIDED.\n    const onCompletePage = useCallback((data)=> {\n        //console.log(\"This is from the surveyOne2.js file \",data);\n        setShowPage(!showPage);\n\n        let response = data; // to play around with the data\n        console.log(data);\n        let titles = []; //store all the wanted titles from the survey \n        let send_data = []; //store all the FormData to be sent\n        let char_count = 0; //keep track of the amount of characters in titles to avoid errors\n        let username = response.Username;\n        nametotake=username;\n\n        //console.log(username);\n        //get list of all prefered genres\n        let desired_genres = response.prefered_genres;\n\n        //go through all the desired genres\n        for (var x = 0; x < desired_genres.length; x++) {\n            let selected_genre = desired_genres[x];\n\n            //console.log(response[selected_genre][\"Yes\"]);\n            //yes answers\n            if (response[selected_genre][\"Yes\"] != null){\n                //get the yes titles\n                let yes_titles = response[selected_genre][\"Yes\"][\"Anime\"];\n                //console.log(yes_titles);\n                for (var y = 0; y < yes_titles.length; y++){\n                    //console.log(\"yes\",yes_titles[y]);\n                    //add the yes_titles to titles\n                    if (titles.includes(yes_titles[y]) === false){\n                        //console.log(\"yes\",yes_titles[y]);\n                        titles.push(yes_titles[y]);\n                        \n                    }\n                }\n            }\n\n            //maybe answers\n            if(response[selected_genre][\"Maybe\"] != null){\n                //get the maybe titles\n                let maybe_titles = response[selected_genre][\"Maybe\"][\"Anime\"];\n                //console.log(maybe_titles);\n                for( var m = 0; m < maybe_titles.length; m++){\n                    //console.log(\"maybe\",maybe_titles[m]);\n                    //add the maybe_titles to titles\n                    if (titles.includes(maybe_titles[m]) === false) {\n                        //console.log(\"maybe\",maybe_titles[m]);\n                        titles.push(maybe_titles[m]);\n                    }\n                }\n            }\n        }\n        //console.log(titles.length);\n\n        //making the different formData to be send to the backend\n        for( var a =0; a < titles.length; a++){\n            if( char_count <= 50){\n                char_count = char_count + titles[a].length + 2;\n                let bodyFormData = new FormData();\n                bodyFormData.append(\"username\", username);\n                bodyFormData.append(\"anime\", titles[a]);\n                send_data.push(bodyFormData);\n            }\n        }\n\n        //console.log(send_data.length);\n        //sending the data to the backend\n        send_data.forEach(element => {\n            register(element)\n        });\n        \n    }, [showPage])\n\n    //can customize the thank you page for what we want. not mandatory.\n    // removed from use due to time constraints\n    /*const setFinalPage = () => {\n        return(\n            <main>\n                <h1>Thank you for taking the survey. Please wait while we build your recommendations.</h1>\n            </main>\n        )\n    }*/\n\n    const location = useLocation();\n    let recArray = [];\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [users, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch(\"http://localhost:5000\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              setIsLoaded(true);\n              setItems(result);\n            },\n            (error) => {\n              setIsLoaded(true);\n              setError(error);\n            }\n          )\n    }, [])\n\n    users.forEach(element => {\n        if (element.fields.username == nametotake){\n            console.log(element.fields.username);\n            recArray = element.fields.recommendations.match(/\\d+/g);\n            for (var i = 0; i < recArray.length; i++){\n                recArray[i] = parseInt(recArray[i], 10);\n            }\n        }\n    })\n\n    //console.log(\"recArray\",recArray);\n    user_recs = recArray;\n    console.log(user_recs);\n\n    \n    return(\n        <Fragment>\n            <MySurvey showCompletedPage={data=>onCompletePage(data)} />\n            <Link to ={{\n                pathname:\"/Anime\",\n                state:{\n                    user:nametotake,\n                    recs:recShowIDs,\n                }\n            }}>\n            <button>Head to AniRec</button>\n            </Link>\n        </Fragment>\n        \n    )\n}\n\nexport default SurveyOne;\n"]},"metadata":{},"sourceType":"module"}