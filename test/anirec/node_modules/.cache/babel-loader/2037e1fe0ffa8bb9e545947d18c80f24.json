{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport \"./GenresShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid';\nimport { chunk } from 'lodash';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GenresShowMore() {\n  _s();\n\n  const GENRE_QUERY = gql`\n    query GenreQuery($genre: String, $page: Int) {\n        Page(page: $page, perPage: 48){\n            media(type: ANIME, isAdult: false, genre: $genre, sort: [POPULARITY_DESC]){\n              title{\n                english\n                romaji\n              }\n              genres\n              description\n              coverImage{\n                medium\n                large\n                extraLarge\n              }\n              studios{\n                nodes{\n                  name\n                }\n              }\n            }\n        }\n    }`;\n  const params = useParams();\n  const history = useHistory();\n  const {\n    error,\n    loading,\n    data,\n    refetch\n  } = useQuery(GENRE_QUERY, {\n    variables: {\n      genre: params.genreName,\n      page: params.pageNum\n    }\n  });\n  useEffect(() => {\n    refetch();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading1...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 25\n  }, this);else if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error1 :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 28\n  }, this);else {\n    const rows = chunk(data.Page.media, 4);\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TopSpace, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          id: \"back_btn_space\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/Anime\",\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"back_btn\",\n              id: \"btn-right\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Home\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 73\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          id: \"grid\",\n          children: rows.map(cols => /*#__PURE__*/_jsxDEV(Row, {\n            children: cols.map(col => /*#__PURE__*/_jsxDEV(Col, {\n              md: 3,\n              id: \"grid-content\",\n              children: /*#__PURE__*/_jsxDEV(ListingPageShowCard, {\n                image: col.coverImage.extraLarge,\n                name: col.title.english == null ? col.title.romaji : col.title.english,\n                genre: col.genres,\n                studio: col.studios.nodes.map(studio_name => studio_name.name).join(', ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this), params.pageNum > 1 ? params.pageNum > data.length - Number(1) ? /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"page-btn\",\n            children: \"Previous Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 41\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: `/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"page-btn\",\n              children: \"Previous Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 45\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: {\n              pathname: `/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`\n            },\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              className: \"page-btn\",\n              children: \"Next Page\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 49\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(Link, {\n          to: {\n            pathname: `/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            className: \"page-btn\",\n            children: \"Next Page\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(GenresShowMore, \"PAWbXafHbYbOixLiP0448MLnqho=\", false, function () {\n  return [useParams, useHistory, useQuery];\n});\n\n_c = GenresShowMore;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenresShowMore\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/listing_pages/GenresShowMore.js"],"names":["React","Fragment","useEffect","useState","TopSpace","ListingPageShowCard","Button","Container","Col","Row","Grid","chunk","Link","useParams","useHistory","useQuery","gql","GenresShowMore","GENRE_QUERY","params","history","error","loading","data","refetch","variables","genre","genreName","page","pageNum","rows","Page","media","map","cols","col","coverImage","extraLarge","title","english","romaji","genres","studios","nodes","studio_name","name","join","length","Number","pathname"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport \"./GenresShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Button, Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport {useQuery, gql} from '@apollo/client'\n\nexport default function GenresShowMore(){    \n    const GENRE_QUERY = gql`\n    query GenreQuery($genre: String, $page: Int) {\n        Page(page: $page, perPage: 48){\n            media(type: ANIME, isAdult: false, genre: $genre, sort: [POPULARITY_DESC]){\n              title{\n                english\n                romaji\n              }\n              genres\n              description\n              coverImage{\n                medium\n                large\n                extraLarge\n              }\n              studios{\n                nodes{\n                  name\n                }\n              }\n            }\n        }\n    }`;\n\n    const params = useParams();\n    const history = useHistory();\n    const {error, loading, data, refetch} = useQuery(GENRE_QUERY, \n        {\n            variables: \n                {\n                    genre:params.genreName,\n                    page:params.pageNum\n                }\n        }\n    );\n\n    \n\n\n    useEffect(()=>{\n        refetch()\n       }, []\n    );\n\n    if (loading) return <p>Loading1...</p>\n    else if (error) return <p>Error1 :(</p>\n    else{\n        const rows = chunk(data.Page.media, 4)\n        return (\n            <Fragment>\n                <TopSpace />\n                <Container className=\"\">\n                    <Row id=\"back_btn_space\">\n                        <Link to={\"/Anime\"}>\n                            <Button className=\"back_btn\" id=\"btn-right\"><strong>Home</strong></Button>\n                        </Link>\n                    </Row>\n                    <Grid id=\"grid\">\n                        {rows.map((cols) => (\n                            <Row>\n                                {cols.map((col) => (\n                                    <Col md={3} id=\"grid-content\">\n                                        <ListingPageShowCard   \n                                            image={col.coverImage.extraLarge} \n                                            name={(col.title.english==null)\n                                                ? col.title.romaji :\n                                                col.title.english}\n                                            genre={col.genres}\n                                            studio={col.studios.nodes.map(studio_name => \n                                                studio_name.name).join(', ')}/>\n                                    </Col>\n                                )\n                                )}\n                            </Row>\n                        )\n                        )}\n                    </Grid>\n                    {(params.pageNum > 1) ?\n                                ((params.pageNum > data.length -Number(1)) ?\n                                    <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`}}>\n                                        <Button className=\"page-btn\">\n                                            Previous Page\n                                        </Button>\n                                    </Link> :\n                                    <Fragment>\n                                            <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) - 1}`}}>\n                                                <Button  className=\"page-btn\">\n                                                    Previous Page\n                                                </Button>\n                                            </Link>\n                                            <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`}}>\n                                                <Button  className=\"page-btn\">\n                                                    Next Page\n                                                </Button>\n                                            </Link> \n                                    </Fragment> ): \n                                <Link to={{pathname:`/GenresShowMore/${params.genreName}/${Number(params.pageNum) + 1}`}}>\n                                    <Button  className=\"page-btn\">\n                                        Next Page\n                                    </Button>\n                                </Link>\n                            }\n                </Container>\n            </Fragment>\n        );\n    }\n}"]},"metadata":{},"sourceType":"module"}