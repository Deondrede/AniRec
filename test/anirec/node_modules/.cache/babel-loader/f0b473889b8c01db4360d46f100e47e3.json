{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GetUserRecs() {\n  const promise = axios.get('http://localhost:5000');\n  const dataPromise = promise.then(response => response.data);\n  return dataPromise;\n}\n\n_c = GetUserRecs;\nGetUserRecs().then(data => {\n  for (var user in data) {\n    if (data[user][\"fields\"][\"username\"] == \"doggo\") {\n      var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n\n      for (var i = 0; i < recArray.length; i++) {\n        recArray[i] = parseInt(recArray[i], 10);\n      }\n\n      console.log(recArray);\n    }\n  }\n});\n\nconst RecQueryComponent = ({\n  username\n}) => {\n  _s();\n\n  const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }        UserArray.push(data);\n\n    }`;\n  const RecArray = GetUserRecs(username);\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(REC_QUERY, {\n    variables: {\n      id: RecArray[i]\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading1...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error1 :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 23\n  }, this);\n  return data;\n};\n\n_s(RecQueryComponent, \"GiCbuNzsD6/Beq272EawZ+N+s04=\", false, function () {\n  return [useQuery];\n});\n\n_c2 = RecQueryComponent;\n\nconst ReturnRecArray = ({\n  num,\n  userId\n}) => {\n  const UserArray = [];\n\n  for (let i = 0; i < num; i++) {\n    UserArray.push( /*#__PURE__*/_jsxDEV(RecQueryComponent, {\n      username: userId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 24\n    }, this));\n  }\n\n  return UserArray;\n};\n\n_c3 = ReturnRecArray;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GetUserRecs\");\n$RefreshReg$(_c2, \"RecQueryComponent\");\n$RefreshReg$(_c3, \"ReturnRecArray\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/home_page/UserRecPulling.js"],"names":["React","useQuery","gql","GetUserRecs","promise","axios","get","dataPromise","then","response","data","user","recArray","match","i","length","parseInt","console","log","RecQueryComponent","username","REC_QUERY","RecArray","error","loading","variables","id","ReturnRecArray","num","userId","UserArray","push"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;;AAEA,SAASC,WAAT,GAAsB;AAClB,QAAMC,OAAO,GAAGC,KAAK,CAACC,GAAN,CAAU,uBAAV,CAAhB;AACA,QAAMC,WAAW,GAAGH,OAAO,CAACI,IAAR,CAAcC,QAAD,IAAcA,QAAQ,CAACC,IAApC,CAApB;AACA,SAAOH,WAAP;AACH;;KAJQJ,W;AAMTA,WAAW,GAAGK,IAAd,CAAmBE,IAAI,IAAI;AACvB,OAAK,IAAIC,IAAT,IAAiBD,IAAjB,EAAsB;AAClB,QAAIA,IAAI,CAACC,IAAD,CAAJ,CAAW,QAAX,EAAqB,UAArB,KAAoC,OAAxC,EAAgD;AAC5C,UAAIC,QAAQ,GAAGF,IAAI,CAACC,IAAD,CAAJ,CAAW,QAAX,EAAqB,iBAArB,EAAwCE,KAAxC,CAA8C,MAA9C,CAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACG,MAA7B,EAAqCD,CAAC,EAAtC,EAAyC;AACrCF,QAAAA,QAAQ,CAACE,CAAD,CAAR,GAAcE,QAAQ,CAACJ,QAAQ,CAACE,CAAD,CAAT,EAAc,EAAd,CAAtB;AACH;;AACDG,MAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;AACH;AACJ;AACJ,CAVD;;AAYA,MAAMO,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAe;AAAA;;AACrC,QAAMC,SAAS,GAAGnB,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAtBI;AAwBA,QAAMoB,QAAQ,GAAGnB,WAAW,CAACiB,QAAD,CAA5B;AACA,QAAM;AAACG,IAAAA,KAAD;AAAQC,IAAAA,OAAR;AAAiBd,IAAAA;AAAjB,MAAyBT,QAAQ,CAACoB,SAAD,EACnC;AACII,IAAAA,SAAS,EAAC;AACNC,MAAAA,EAAE,EAAEJ,QAAQ,CAACR,CAAD;AADN;AADd,GADmC,CAAvC;AAOA,MAAIU,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAID,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACX,SAAOb,IAAP;AACH,CApCD;;GAAMS,iB;UA0B6BlB,Q;;;MA1B7BkB,iB;;AAsCN,MAAMQ,cAAc,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAMC,EAAAA;AAAN,CAAD,KAAmB;AACtC,QAAMC,SAAS,GAAG,EAAlB;;AACA,OAAK,IAAIhB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,GAApB,EAAyBd,CAAC,EAA1B,EAA8B;AAC1BgB,IAAAA,SAAS,CAACC,IAAV,eAAe,QAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAEF;AAA7B;AAAA;AAAA;AAAA;AAAA,YAAf;AACH;;AACD,SAAOC,SAAP;AACH,CAND;;MAAMH,c","sourcesContent":["import React from \"react\";\nimport {useQuery, gql} from '@apollo/client';\n\nfunction GetUserRecs(){\n    const promise = axios.get('http://localhost:5000');\n    const dataPromise = promise.then((response) => response.data);\n    return dataPromise;\n}\n\nGetUserRecs().then(data => {\n    for (var user in data){\n        if (data[user][\"fields\"][\"username\"] == \"doggo\"){\n            var recArray = data[user][\"fields\"][\"recommendations\"].match(/\\d+/g);\n            for (var i = 0; i < recArray.length; i++){\n                recArray[i] = parseInt(recArray[i], 10);\n            } \n            console.log(recArray);\n        }\n    }\n})\n\nconst RecQueryComponent = ({username}) =>{\n    const REC_QUERY = gql`\n    query RecQuery($id: id) {\n        Media(type: ANIME, id: $id){\n            id\n            title{\n                english\n                romaji\n            }\n            genres\n            description\n            coverImage{\n                medium\n                large\n                extraLarge\n            }\n            studios{\n                nodes{\n                    name\n                }\n            }\n        }        UserArray.push(data);\n\n    }`;\n\n    const RecArray = GetUserRecs(username);\n    const {error, loading, data} = useQuery(REC_QUERY,\n        {\n            variables:{\n                id: RecArray[i]\n            }\n        });\n\n    if (loading) return <p>Loading1...</p>\n    if (error) return <p>Error1 :(</p>\n    return data\n}\n\nconst ReturnRecArray = ({num, userId}) => {\n    const UserArray = [];\n    for (let i = 0; i < num; i++) {\n        UserArray.push(<RecQueryComponent username={userId}/>);\n    }\n    return UserArray;\n}\n\n"]},"metadata":{},"sourceType":"module"}