{"ast":null,"code":"import { gql } from '@apollo/client';\nimport React from \"react\";\nexport default function GenreQuery(props) {\n  const GENRE_QUERY = gql`\n    {\n        Page(page: 1, perPage: 50){\n          pageInfo{\n            lastPage\n          }\n          media(type: ANIME, isAdult: false, genre: $genreName){\n            title{\n              english\n              romaji\n            }\n            genres\n            description\n            coverImage{\n              medium\n              large\n              extraLarge\n            }\n            studios{\n              nodes{\n                name\n              }\n            }\n          }\n        }\n    }`;\n  const GENRE_QUERY_BODY = GENRE_QUERY.loc.source.body;\n  const splitQuery = GENRE_QUERY_BODY.split(`\\n`);\n  splitQuery.slice(1, 25);\n  splitQuery.toString().replace(`$genreName`, props);\n  const finalQuery = gql`\n    ${splitQuery.join(`\\n`)}\n    `;\n  return finalQuery;\n}\n_c = GenreQuery;\n\nvar _c;\n\n$RefreshReg$(_c, \"GenreQuery\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/components/dynamic_genre_query.js"],"names":["gql","React","GenreQuery","props","GENRE_QUERY","GENRE_QUERY_BODY","loc","source","body","splitQuery","split","slice","toString","replace","finalQuery","join"],"mappings":"AAAA,SAAQA,GAAR,QAAkB,gBAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,eAAe,SAASC,UAAT,CAAoBC,KAApB,EAA0B;AACrC,QAAMC,WAAW,GAAGJ,GACnB;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MA1BI;AA4BA,QAAMK,gBAAgB,GAAGD,WAAW,CAACE,GAAZ,CAAgBC,MAAhB,CAAuBC,IAAhD;AACA,QAAMC,UAAU,GAAGJ,gBAAgB,CAACK,KAAjB,CAAwB,IAAxB,CAAnB;AACAD,EAAAA,UAAU,CAACE,KAAX,CAAiB,CAAjB,EAAoB,EAApB;AACAF,EAAAA,UAAU,CAACG,QAAX,GAAsBC,OAAtB,CAA+B,YAA/B,EAA4CV,KAA5C;AACA,QAAMW,UAAU,GAAGd,GAClB;AACL,MAAMS,UAAU,CAACM,IAAX,CAAiB,IAAjB,CAAsB;AAC5B,KAHI;AAKA,SAAOD,UAAP;AACH;KAvCuBZ,U","sourcesContent":["import {gql} from '@apollo/client'\nimport React from \"react\";\n\nexport default function GenreQuery(props){\n    const GENRE_QUERY = gql\n    `\n    {\n        Page(page: 1, perPage: 50){\n          pageInfo{\n            lastPage\n          }\n          media(type: ANIME, isAdult: false, genre: $genreName){\n            title{\n              english\n              romaji\n            }\n            genres\n            description\n            coverImage{\n              medium\n              large\n              extraLarge\n            }\n            studios{\n              nodes{\n                name\n              }\n            }\n          }\n        }\n    }`\n\n    const GENRE_QUERY_BODY = GENRE_QUERY.loc.source.body\n    const splitQuery = GENRE_QUERY_BODY.split(`\\n`)\n    splitQuery.slice(1, 25)\n    splitQuery.toString().replace(`$genreName`, props)\n    const finalQuery = gql\n    `\n    ${splitQuery.join(`\\n`)}\n    `\n\n    return finalQuery\n}\n\n"]},"metadata":{},"sourceType":"module"}