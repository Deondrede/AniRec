{"ast":null,"code":"var _jsxFileName = \"/home/jason/AniRec/test/anirec/src/pages/listing_pages/ShowMore.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport \"./ShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid';\nimport { chunk } from 'lodash';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport { useQuery, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ShowMore(props) {\n  _s();\n\n  const [genre, setGenre] = useState();\n  const GENRE_QUERY = gql`\n        query GenreQuery($genre: String) {\n            Page(page: 1, perPage: 50){\n                media(type: ANIME, isAdult: false, genre: $genre){\n                  title{\n                    english\n                    romaji\n                  }\n                  genres\n                  description\n                  coverImage{\n                    medium\n                    large\n                    extraLarge\n                  }\n                  studios{\n                    nodes{\n                      name\n                    }\n                  }\n                }\n            }\n        }`;\n  const param = useParams().expandedTag;\n  const {\n    error,\n    loading,\n    data\n  } = useQuery(GENRE_QUERY, {\n    variables: {\n      genre: param\n    }\n  });\n  useEffect(() => {\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading1...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 29\n    }, this);else if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Error1 :(\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 32\n    }, this);else {\n      const rows = chunk(data.Page.media, 4);\n      return /*#__PURE__*/_jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TopSpace, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          className: \"float-md-3\",\n          children: [/*#__PURE__*/_jsxDEV(Row, {\n            id: \"back_btn_space\",\n            children: /*#__PURE__*/_jsxDEV(Link, {\n              className: \"back_btn\",\n              to: \"/Anime\",\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 70\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            children: rows.map(cols => /*#__PURE__*/_jsxDEV(Row, {\n              children: cols.map(col => /*#__PURE__*/_jsxDEV(Col, {\n                md: 3,\n                children: /*#__PURE__*/_jsxDEV(ListingPageShowCard, {\n                  image: col.coverImage.large,\n                  name: col.title.english == null ? col.title.romaji : col.title.english,\n                  genre: col.genres.join(', '),\n                  studio: col.studios.nodes.map(studio_name => studio_name.name).join(', ')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this);\n    }\n  }, [data]);\n}\n\n_s(ShowMore, \"xnyht8jRmiBwwsmeI2JRtfEsjuw=\", false, function () {\n  return [useParams, useQuery];\n});\n\n_c = ShowMore;\n\nvar _c;\n\n$RefreshReg$(_c, \"ShowMore\");","map":{"version":3,"sources":["/home/jason/AniRec/test/anirec/src/pages/listing_pages/ShowMore.js"],"names":["React","Fragment","useEffect","useState","TopSpace","ListingPageShowCard","Container","Col","Row","Grid","chunk","Link","useParams","useLocation","useQuery","gql","ShowMore","props","genre","setGenre","GENRE_QUERY","param","expandedTag","error","loading","data","variables","rows","Page","media","map","cols","col","coverImage","large","title","english","romaji","genres","join","studios","nodes","studio_name","name"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from \"react\";\nimport \"./ShowMore.css\";\nimport TopSpace from \"../../components/global_elements/TopSpacer\";\nimport ListingPageShowCard from '../../components/ListingPageShowCard';\nimport { Container } from \"react-bootstrap\";\nimport { Col, Row, Grid } from 'react-flexbox-grid'\nimport { chunk } from 'lodash'\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport {useQuery, gql} from '@apollo/client'\n\nexport default function ShowMore(props){\n    const [genre, setGenre] = useState()\n    const GENRE_QUERY = gql`\n        query GenreQuery($genre: String) {\n            Page(page: 1, perPage: 50){\n                media(type: ANIME, isAdult: false, genre: $genre){\n                  title{\n                    english\n                    romaji\n                  }\n                  genres\n                  description\n                  coverImage{\n                    medium\n                    large\n                    extraLarge\n                  }\n                  studios{\n                    nodes{\n                      name\n                    }\n                  }\n                }\n            }\n        }`;\n\n    const param = useParams().expandedTag;\n    const {error, loading, data} = useQuery(\n        GENRE_QUERY,\n        {\n            variables: {\n                genre: param\n            }\n        }\n    );\n    useEffect(()=>{\n        if (loading) return <p>Loading1...</p>\n        else if (error) return <p>Error1 :(</p>\n        else{\n            const rows = chunk(data.Page.media, 4)\n            return (\n                <Fragment>\n                    <TopSpace />\n                    <Container className=\"float-md-3\">\n                        <Row id=\"back_btn_space\">\n                            <Link className=\"back_btn\" to={\"/Anime\"}><strong>Back</strong></Link>\n                        </Row>\n                        <Grid>\n                            {rows.map((cols) => (\n                                <Row>\n                                    {cols.map((col) => (\n                                        <Col md={3}>\n                                            <ListingPageShowCard   \n                                                image={col.coverImage.large} \n                                                name={(col.title.english==null)\n                                                    ? col.title.romaji :\n                                                    col.title.english}\n                                                genre={col.genres.join(', ')}\n                                                studio={col.studios.nodes.map(studio_name => \n                                                    studio_name.name).join(', ')}/>\n                                        </Col>\n                                    )\n                                    )}\n                                </Row>\n                            )\n                            )}\n                        </Grid>\n                    </Container>\n                </Fragment>\n            );\n        }\n       }, [data]\n    );\n}"]},"metadata":{},"sourceType":"module"}